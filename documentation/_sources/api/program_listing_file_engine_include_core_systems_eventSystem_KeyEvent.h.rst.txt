
.. _program_listing_file_engine_include_core_systems_eventSystem_KeyEvent.h:

Program Listing for File KeyEvent.h
===================================

|exhale_lsh| :ref:`Return to documentation for file <file_engine_include_core_systems_eventSystem_KeyEvent.h>` (``engine/include/core/systems/eventSystem/KeyEvent.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #ifndef ENGINE2_0_KEY_EVENT_H
   #define ENGINE2_0_KEY_EVENT_H
   
   #include "Event.h"
   #include "core/systems/inputSystem/keysAndButtons/KeyboardKeys.h"
   
   
   namespace GDE {
   
       class KeyEvent          : public Event {
           protected:
               KeyCode keyCode;
   
           protected:
               explicit KeyEvent(KeyCode _keyCode) : keyCode(_keyCode) {}
   
           public:
               [[nodiscard]] inline KeyCode getKeyCode() const { return keyCode; }
   
               [[nodiscard]] int getCategoryFlags() const override { return EventCategory::EventCategoryKeyboard | EventCategory::EventCategoryInput; }
       };
   
   
   
   
       class KeyPressedEvent   : public KeyEvent {
           private:
               int repeatedTimes;
   
           public:
               KeyPressedEvent(KeyCode _keyCode, int _repeatedTimes) : KeyEvent(_keyCode), repeatedTimes(_repeatedTimes) {}
   
               [[nodiscard]] inline int getRepeatedTimes() const { return repeatedTimes; }
   
               [[nodiscard]] std::string toString() const override {
                   std::stringstream _sst;
                   _sst << getName() << ": Key = " << (char)keyCode << " (" << keyCode << ") (down " << repeatedTimes << " times)";
                   return _sst.str();
               }
   
               static EventType getStaticType() { return EventType::KeyPressed; }
               [[nodiscard]] EventType getEventType() const override { return getStaticType(); }
               [[nodiscard]] const char* getName() const override { return "KeyPressed"; }
       };
   
   
   
   
       class KeyTypedEvent     : public KeyEvent {
           private:
               char typedChar;
   
           public:
               explicit KeyTypedEvent(KeyCode _keyCode) : KeyEvent(_keyCode), typedChar((char)keyCode) {  }
   
               [[nodiscard]] inline char getCharTyped() const { return (char)typedChar; }
   
               [[nodiscard]] std::string toString() const override {
                   std::stringstream _sst;
                   _sst << getName() << ": Key = " << (char)keyCode;
                   return _sst.str();
               }
   
               static EventType getStaticType() { return EventType::KeyTyped; }
               [[nodiscard]] EventType getEventType() const override { return getStaticType(); }
               [[nodiscard]] const char* getName() const override { return "KeyTyped"; }
       };
   
   
   
   
       class KeyReleasedEvent  : public KeyEvent {
           public:
               explicit KeyReleasedEvent(KeyCode _keyCode) : KeyEvent(_keyCode) {}
   
               [[nodiscard]] std::string toString() const override {
                   std::stringstream _sst;
                   _sst << getName() << ": Key = " << (char)keyCode << " (" << keyCode << ")";
                   return _sst.str();
               }
   
               static EventType getStaticType()  { return EventType::KeyReleased; }
               [[nodiscard]] EventType getEventType() const override { return getStaticType(); }
               [[nodiscard]] const char* getName() const override { return "KeyReleased"; }
       };
   
   }
   
   #endif //ENGINE2_0_KEY_EVENT_H
