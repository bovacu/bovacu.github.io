
.. _program_listing_file_engine_include_core_graph_Scene.h:

Program Listing for File Scene.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file_engine_include_core_graph_Scene.h>` (``engine/include/core/graph/Scene.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #ifndef ENGINE_SCENE_H
   #define ENGINE_SCENE_H
   
   #include "nlohmann/json.hpp"
   #include "core/util/Delta.h"
   #include "core/graph/Graph.h"
   #include "core/graph/components/Components.h"
   
   namespace GDE {
   
       class Camera;
       class Window;
       class Engine;
       class Canvas;
   
       class Scene {
           friend class Graph;
           friend class ConfigManager;
   
           private:
               Graph mainGraph;
   
               std::vector<Camera*> cameras;
   
               std::vector<Canvas*> canvases;
   
               Camera* mainCamera = nullptr;
   
               std::unordered_map<std::string, NodeID> prefabs;
   
           public:
               std::string debugName;
   
               Engine* engine = nullptr;
   
           public:
               explicit Scene(Engine* _engine, const std::string& _debugName = "Scene");
               virtual ~Scene();
   
               virtual void preInit(Manager* _manager, Window* _window, const nlohmann::json& _sceneJson) {  }
   
               virtual void onInit() {  }
   
               virtual void onEvent(Event& _event);
   
               virtual void onUpdate(Delta _dt);
   
               virtual void onFixedUpdate(Delta _dt);
   
               void onRender(Delta _dt);
   
               virtual void onImGuiRender(Delta _dt) {  }
   
               virtual void onDebugRender(Delta _dt);
   
               virtual void onEnd() {  }
   
               Graph* getMainGraph();
   
               std::vector<Camera*>& getCameras();
   
               Camera* getMainCamera();
   
               Camera* addCamera(Window* window);
   
               void enableCamera(const NodeID& _cameraID, bool _enable);
   
               void removeCamera(const NodeID& _cameraID);
   
               void switchMainCamera(const NodeID& _camera);
   
               [[nodiscard]] const std::string& getName() const { return debugName; }
   
               Canvas* addNewCanvas(const std::string& _canvasTag);
   
               void removeCanvas(const std::string& _canvasTag);
   
               void removeCanvas(Canvas* _canvas);
   
               std::vector<Canvas*>& getCanvases();
   
               std::vector<NodeID> getPrefabs();
   
               NodeID getPrefab(const std::string& _prefabKey);
       };
   
   }
   
   #endif //ENGINE_SCENE_H
