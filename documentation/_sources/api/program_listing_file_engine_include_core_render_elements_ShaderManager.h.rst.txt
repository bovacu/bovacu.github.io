
.. _program_listing_file_engine_include_core_render_elements_ShaderManager.h:

Program Listing for File ShaderManager.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_engine_include_core_render_elements_ShaderManager.h>` (``engine/include/core/render/elements/ShaderManager.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Created by borja on 20/1/22.
   
   
   #ifndef ENGINE2_0_SHADER_MANAGER_H
   #define ENGINE2_0_SHADER_MANAGER_H
   
   
   #include "core/util/Util.h"
   #include "Shader.h"
   #include "glm/vec2.hpp"
   #include "glm/vec3.hpp"
   #include "glm/vec4.hpp"
   #include "glm/ext/matrix_float4x4.hpp"
   #include "core/systems/fileSystem/FileManager.h"
   
   namespace GDE {
   
       typedef GLuint ShaderID;
   
       class ShaderManager {
           private:
               std::unordered_map<std::string, Shader*> shadersByName;
               std::unordered_map<ShaderID, Shader*> shadersById;
               FileManager* fileManager = nullptr;
   
           public:
               void init(FileManager* _fileManager);
   
               void destroy();
   
               ShaderID loadShader(const std::string& _shaderName, const std::string& _vertex, const std::string& _fragment);
   
               void unloadShader(const std::string& _name);
   
               Shader* getShader(const std::string& _name);
   
               Shader* getShader(const ShaderID& _shaderID);
   
               void loadShaderVertexConfig(const std::string& _shaderName, const std::vector<VertexConfig>& _vertexConfig, int _maxIndicesPerDrawCall);
   
               void setInt(ShaderID _shaderID, const std::string& _uniformName, int _value) const;
   
               void setInt2(ShaderID _shaderID, const std::string& _uniformName, const glm::ivec2& _value) const;
   
               void setInt3(ShaderID _shaderID, const std::string& _uniformName, const glm::ivec3& _value) const;
   
               void setInt4(ShaderID _shaderID, const std::string& _uniformName, const glm::ivec4& _value) const;
   
               void setFloat(ShaderID _shaderID, const std::string& _uniformName, float _value) const;
   
               void setFloat2(ShaderID _shaderID, const std::string& _uniformName, const glm::vec2& _value) const;
   
               void setFloat3(ShaderID _shaderID, const std::string& _uniformName, const glm::vec3& _value) const;
   
               void setFloat4(ShaderID _shaderID, const std::string& _uniformName, const glm::vec4& _value) const;
   
               void setMat2(ShaderID _shaderID, const std::string& _uniformName, const glm::mat2& _value) const;
   
               void setMat3(ShaderID _shaderID, const std::string& _uniformName, const glm::mat3& _value) const;
   
               void setMat4(ShaderID _shaderID, const std::string& _uniformName, const glm::mat4& _value) const;
       };
   
   }
   
   
   #endif //ENGINE2_0_SHADER_MANAGER_H
