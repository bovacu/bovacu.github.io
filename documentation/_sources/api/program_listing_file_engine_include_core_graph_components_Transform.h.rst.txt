
.. _program_listing_file_engine_include_core_graph_components_Transform.h:

Program Listing for File Transform.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_engine_include_core_graph_components_Transform.h>` (``engine/include/core/graph/components/Transform.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //
   // Created by borja on 9/5/22.
   //
   
   #ifndef GDE_TRANSFORM_H
   #define GDE_TRANSFORM_H
   
   #include <vector>
   #include "glm/ext/matrix_transform.hpp"
   #include "core/util/Vec.h"
   #include "entt/entity/entity.hpp"
   
   typedef entt::entity NodeID;
   
   namespace GDE {
   
       class Transform {
           // Local Space
           private:
               glm::vec3 localPosition {0.0f, 0.0f, 0.0f};
   
               glm::vec3 localScale { 1.0f, 1.0f, 1.0f };
   
               float localRotation = 0.0f;
   
               bool dirty = false;
   
           public:
               bool staticTransform = false;
   
           public:
               explicit Transform(const NodeID& _nodeId);
   
               NodeID parent;
   
               Transform* parentTransform;
   
               std::vector<NodeID> children;
   
               glm::mat4 modelMatrix = glm::mat4(1.0f);
   
               glm::mat4 localModelMatrix = glm::mat4(1.0f);
   
               glm::mat4 getLocalModelMatrix();
   
               void update();
   
               void setPosition(const Vec2F& _position);
   
               void setPositionWorld(const Vec2F& _position);
   
               void setPositionWorld(float _x, float _y);
   
               void setPosition(float _x, float _y);
   
               [[nodiscard]] Vec2F getPositionLocal() const;
   
               [[nodiscard]] Vec2F getPositionWorld() const;
   
               void translate(const Vec2F& _direction);
   
               void translate(float _x, float _y);
   
               void setRotation(float _rotation);
   
               [[nodiscard]] float getRotationLocal() const;
   
               [[nodiscard]] float getRotationWorld() const;
   
               void rotate(float _amount);
   
               void setScale(const Vec2F& _scale);
   
               void setScale(float _x, float _y);
   
               [[nodiscard]] Vec2F getScaleLocal() const;
   
               [[nodiscard]] Vec2F getScaleLWorld() const;
   
               void scale(const Vec2F& _scale);
   
               void scale(float _x, float _y);
       };
   
   }
   
   #endif //GDE_TRANSFORM_H
