
.. _program_listing_file_engine_include_core_graph_components_UI.h:

Program Listing for File UI.h
=============================

|exhale_lsh| :ref:`Return to documentation for file <file_engine_include_core_graph_components_UI.h>` (``engine/include/core/graph/components/UI.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //
   // Created by borja on 9/5/22.
   //
   
   #ifndef GDE_UI_H
   #define GDE_UI_H
   
   #include "entt/entity/entity.hpp"
   #include "core/render/elements/IRenderizable.h"
   #include "core/systems/uiSystem/Canvas.h"
   #include "core/systems/inputSystem/keysAndButtons/MouseKeys.h"
   #include "core/systems/inputSystem/keysAndButtons/KeyboardKeys.h"
   #include "core/systems/inputSystem/keysAndButtons/ControllerButtons.h"
   
   typedef entt::entity NodeID;
   
   namespace GDE {
   
       class UI : public IRenderizable {
           protected:
               Texture* texture = nullptr;
   
           public:
               friend class SpriteBatch;
   
               [[nodiscard]] GLuint getTexture() const override { return texture->getGLTexture(); }
   
               [[nodiscard]] Vec2I getSize() const override { return texture->getSize(); }
   
               [[nodiscard]] IntRect getRegion() const override { return texture->getRegion(); }
   
               virtual ~UI() override {};
       };
   
   
   
       class UIInteractable {
   
           public:
               friend class Canvas;
   
               UDelegate<bool(NodeID, Canvas*)> interactionTrigger;
   
               MDelegate<void(MouseCode)> onClick;
   
               MDelegate<void()> onMouseEntered;
   
               MDelegate<void()> onMouseExited;
   
               MDelegate<void(Vec2F)> onScroll;
   
               MDelegate<void(KeyCode)> onKeyPressed;
   
               MDelegate<void(ControllerButtons)> onGamepadButtonPressed;
   
               MDelegate<void(int)> onMobileClick;
   
               int priority = 0;
   
               explicit UIInteractable(const NodeID& _nodeId);
   
           private:
               enum MouseStatus {
                   MouseEntered,
                   MouseExited
               };
   
               MouseStatus mouseStatus = MouseStatus::MouseExited;
   
               void onEvent(const NodeID& _nodeID, EventDispatcher& _eventDispatcher, Event& _event, Canvas* _canvas);
       };
   
   }
   
   #endif //GDE_UI_H
