<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="class_r_d_e_1_1_window" kind="class" language="C++" prot="public">
    <compoundname>RDE::Window</compoundname>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_r_d_e_1_1_window_1a066553f781c5bd3fb982cbf04e7c1335" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class WindowInput</definition>
        <argsstring></argsstring>
        <name>WindowInput</name>
        <qualifiedname>RDE::Window::WindowInput</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_window_input" kindref="compound">WindowInput</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="20" column="22" bodyfile="engine/include/core/render/window/Window.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_r_d_e_1_1_window_1af6869525aa5e57287463890e6e8c1aca" prot="protected" static="no" mutable="no">
        <type>SDL_Window *</type>
        <definition>SDL_Window* RDE::Window::window</definition>
        <argsstring></argsstring>
        <name>window</name>
        <qualifiedname>RDE::Window::window</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>SDL_Window used as a base of the engine <ref refid="class_r_d_e_1_1_window" kindref="compound">Window</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="26" column="24" bodyfile="engine/include/core/render/window/Window.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_window_1a5878bf1094d0b3f94e6125c83c499507" prot="protected" static="no" mutable="no">
        <type>SDL_GLContext</type>
        <definition>SDL_GLContext RDE::Window::context</definition>
        <argsstring></argsstring>
        <name>context</name>
        <qualifiedname>RDE::Window::context</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
<para>Context used by SDL and OpenGL to render. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="31" column="27" bodyfile="engine/include/core/render/window/Window.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_window_1af5788b330cea1be6e0aa3119761faf83" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_r_d_e_1_1_unique_delegate" kindref="compound">UniqueDelegate</ref>&lt; void(<ref refid="class_r_d_e_1_1_event" kindref="compound">Event</ref> &amp;)&gt;</type>
        <definition>UniqueDelegate&lt;void(Event&amp;)&gt; RDE::Window::eventCallback</definition>
        <argsstring></argsstring>
        <name>eventCallback</name>
        <qualifiedname>RDE::Window::eventCallback</qualifiedname>
        <briefdescription>
<para>Sets the function that will handle the events of the Window/. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_r_d_e_1_1_engine_1af46636437b15e19ebe1a8ddc5e96c818" kindref="member">Engine::onEvent(Event&amp;)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="37" column="28" bodyfile="engine/include/core/render/window/Window.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_window_1a1944fb82b70d199c5710bc59cb5c1dbc" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_r_d_e_1_1_r_d_e_config" kindref="compound">RDEConfig</ref> *</type>
        <definition>RDEConfig* RDE::Window::properties</definition>
        <argsstring></argsstring>
        <name>properties</name>
        <qualifiedname>RDE::Window::properties</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="struct_r_d_e_1_1_r_d_e_config" kindref="compound">RDEConfig</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="42" column="23" bodyfile="engine/include/core/render/window/Window.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_window_1acaca7091649341b024bdb9018939b42d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool RDE::Window::minimized</definition>
        <argsstring></argsstring>
        <name>minimized</name>
        <qualifiedname>RDE::Window::minimized</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>If the <ref refid="class_r_d_e_1_1_window" kindref="compound">Window</ref> is minimized or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="47" column="18" bodyfile="engine/include/core/render/window/Window.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_window_1a2723ef30eded7046316b60c5e2ecad91" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool RDE::Window::hasFocus</definition>
        <argsstring></argsstring>
        <name>hasFocus</name>
        <qualifiedname>RDE::Window::hasFocus</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
<para>If the <ref refid="class_r_d_e_1_1_window" kindref="compound">Window</ref> has the focus. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="52" column="18" bodyfile="engine/include/core/render/window/Window.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_window_1a7179e1ce0f51c1655b179c784b451ec0" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool RDE::Window::running</definition>
        <argsstring></argsstring>
        <name>running</name>
        <qualifiedname>RDE::Window::running</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
<para>If the window is running or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="57" column="18" bodyfile="engine/include/core/render/window/Window.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_window_1ae4e00ac0ea93103eddf5b9de2a7b3ed0" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int RDE::Window::currentDisplayIndex</definition>
        <argsstring></argsstring>
        <name>currentDisplayIndex</name>
        <qualifiedname>RDE::Window::currentDisplayIndex</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="59" column="17" bodyfile="engine/include/core/render/window/Window.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_r_d_e_1_1_window_1abebb751d39e74f7aa160187126389307" prot="public" static="no" mutable="no">
        <type><ref refid="struct_r_d_e_1_1_unique_delegate" kindref="compound">UniqueDelegate</ref>&lt; bool()&gt;</type>
        <definition>UniqueDelegate&lt;bool()&gt; RDE::Window::shouldUpdateWindow</definition>
        <argsstring></argsstring>
        <name>shouldUpdateWindow</name>
        <qualifiedname>RDE::Window::shouldUpdateWindow</qualifiedname>
        <briefdescription>
<para>This callback lets the user define how and when the window should run the game. By default it is set to run always, but typical customization could be only run if the window is focused or if the window is not minimized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="67" column="28" bodyfile="engine/include/core/render/window/Window.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_window_1a00046f5351f25882c0a0883a65a8ca6e" prot="public" static="no" mutable="no">
        <type><ref refid="struct_r_d_e_1_1_delegate" kindref="compound">Delegate</ref>&lt; void(const <ref refid="struct_r_d_e_1_1_vec2" kindref="compound">Vec2F</ref> &amp;)&gt;</type>
        <definition>Delegate&lt;void(const Vec2F&amp;)&gt; RDE::Window::onWindowMovedCallback</definition>
        <argsstring></argsstring>
        <name>onWindowMovedCallback</name>
        <qualifiedname>RDE::Window::onWindowMovedCallback</qualifiedname>
        <briefdescription>
<para>Callback invoked each time the window is moved. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="72" column="22" bodyfile="engine/include/core/render/window/Window.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_window_1a3dbb7e4927283f1bb09a66e1c058d2d8" prot="public" static="no" mutable="no">
        <type><ref refid="struct_r_d_e_1_1_delegate" kindref="compound">Delegate</ref>&lt; void(const <ref refid="struct_r_d_e_1_1_vec2" kindref="compound">Vec2I</ref> &amp;)&gt;</type>
        <definition>Delegate&lt;void(const Vec2I&amp;)&gt; RDE::Window::onWindowResizedCallback</definition>
        <argsstring></argsstring>
        <name>onWindowResizedCallback</name>
        <qualifiedname>RDE::Window::onWindowResizedCallback</qualifiedname>
        <briefdescription>
<para>Callback invoked each time the window is resized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="77" column="22" bodyfile="engine/include/core/render/window/Window.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_window_1ab21d334778b30af51e75d1982049d5aa" prot="public" static="no" mutable="no">
        <type><ref refid="struct_r_d_e_1_1_delegate" kindref="compound">Delegate</ref>&lt; void(int)&gt;</type>
        <definition>Delegate&lt;void(int)&gt; RDE::Window::onWindowDisplayChangedCallback</definition>
        <argsstring></argsstring>
        <name>onWindowDisplayChangedCallback</name>
        <qualifiedname>RDE::Window::onWindowDisplayChangedCallback</qualifiedname>
        <briefdescription>
<para>Callback invoked each time the window is changed of display. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="82" column="22" bodyfile="engine/include/core/render/window/Window.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_window_1a2598ababf850240119dbf292ce8c87c4" prot="public" static="no" mutable="no">
        <type><ref refid="struct_r_d_e_1_1_delegate" kindref="compound">Delegate</ref>&lt; void()&gt;</type>
        <definition>Delegate&lt;void()&gt; RDE::Window::onWindowMinimizedCallback</definition>
        <argsstring></argsstring>
        <name>onWindowMinimizedCallback</name>
        <qualifiedname>RDE::Window::onWindowMinimizedCallback</qualifiedname>
        <briefdescription>
<para>Callback invoked each time the window is minimized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="87" column="22" bodyfile="engine/include/core/render/window/Window.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_window_1ac82df56cc46be179b4ba72ce4555e7ef" prot="public" static="no" mutable="no">
        <type><ref refid="struct_r_d_e_1_1_delegate" kindref="compound">Delegate</ref>&lt; void()&gt;</type>
        <definition>Delegate&lt;void()&gt; RDE::Window::onWindowMaximizedCallback</definition>
        <argsstring></argsstring>
        <name>onWindowMaximizedCallback</name>
        <qualifiedname>RDE::Window::onWindowMaximizedCallback</qualifiedname>
        <briefdescription>
<para>Callback invoked each time the window is maximized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="92" column="22" bodyfile="engine/include/core/render/window/Window.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_window_1a998cf8886d626fc685c4156efd88bd43" prot="public" static="no" mutable="no">
        <type><ref refid="struct_r_d_e_1_1_delegate" kindref="compound">Delegate</ref>&lt; void()&gt;</type>
        <definition>Delegate&lt;void()&gt; RDE::Window::onWindowFocusedCallback</definition>
        <argsstring></argsstring>
        <name>onWindowFocusedCallback</name>
        <qualifiedname>RDE::Window::onWindowFocusedCallback</qualifiedname>
        <briefdescription>
<para>Callback invoked each time the window is focused. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="97" column="22" bodyfile="engine/include/core/render/window/Window.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_window_1a989a25e37e6d7c923f4b0ee4a7593406" prot="public" static="no" mutable="no">
        <type><ref refid="struct_r_d_e_1_1_delegate" kindref="compound">Delegate</ref>&lt; void()&gt;</type>
        <definition>Delegate&lt;void()&gt; RDE::Window::onWindowUnfocusedCallback</definition>
        <argsstring></argsstring>
        <name>onWindowUnfocusedCallback</name>
        <qualifiedname>RDE::Window::onWindowUnfocusedCallback</qualifiedname>
        <briefdescription>
<para>Callback invoked each time the window is unfocused. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="102" column="22" bodyfile="engine/include/core/render/window/Window.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_r_d_e_1_1_window_1a30104847fe5878ca35ab382b7bb9f129" prot="protected" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>RDE::Window::Window</definition>
        <argsstring>(RDEConfig *_props)</argsstring>
        <name>Window</name>
        <qualifiedname>RDE::Window::Window</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_r_d_e_config" kindref="compound">RDEConfig</ref> *</type>
          <declname>_props</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="105" column="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_r_d_e_1_1_window_1a5f3223e2b54f6b564e38e270cd1e8cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RDE::Window::~Window</definition>
        <argsstring>()</argsstring>
        <name>~Window</name>
        <qualifiedname>RDE::Window::~Window</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="108" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1a009b5f0631b267e7f2179b5d3a9abcfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Window::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <qualifiedname>RDE::Window::update</qualifiedname>
        <briefdescription>
<para>This method is used to update the window, poll the events and swap the buffers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="114" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1a6d603daaa2ca45eba8a31fe9dac1d8a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Window::consumeEvent</definition>
        <argsstring>(Event &amp;_e) const</argsstring>
        <name>consumeEvent</name>
        <qualifiedname>RDE::Window::consumeEvent</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_event" kindref="compound">Event</ref> &amp;</type>
          <declname>_e</declname>
        </param>
        <briefdescription>
<para>Handles an specific event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_e</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_event" kindref="compound">Event</ref> to be handled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="120" column="18" bodyfile="engine/include/core/render/window/Window.h" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1a06adfa6654d3b81f94e2abd390ce46a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int RDE::Window::getWidth</definition>
        <argsstring>() const</argsstring>
        <name>getWidth</name>
        <qualifiedname>RDE::Window::getWidth</qualifiedname>
        <briefdescription>
<para>Returns the width of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="126" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1a0900d5afd9c2bd7bea8a4a3dc1ee8131" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int RDE::Window::getHeight</definition>
        <argsstring>() const</argsstring>
        <name>getHeight</name>
        <qualifiedname>RDE::Window::getHeight</qualifiedname>
        <briefdescription>
<para>Returns the height of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="132" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1af894fa4c9cc9c01bcf44970244ddf107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>std::string &amp; RDE::Window::getTitle</definition>
        <argsstring>()</argsstring>
        <name>getTitle</name>
        <qualifiedname>RDE::Window::getTitle</qualifiedname>
        <briefdescription>
<para>Returns the title of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="138" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1affcffaa1d6bf402f6a2062cb526d6c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Window::setTitle</definition>
        <argsstring>(const std::string &amp;_title)</argsstring>
        <name>setTitle</name>
        <qualifiedname>RDE::Window::setTitle</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>_title</declname>
        </param>
        <briefdescription>
<para>Sets the new title of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_title</parametername>
</parameternamelist>
<parameterdescription>
<para>Title of the window. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="144" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1ae82b6fe5fffce7cb884c6e18e00599be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Window::setWindowSize</definition>
        <argsstring>(int _width, int _height)</argsstring>
        <name>setWindowSize</name>
        <qualifiedname>RDE::Window::setWindowSize</qualifiedname>
        <param>
          <type>int</type>
          <declname>_width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_height</declname>
        </param>
        <briefdescription>
<para>Sets the new size of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_width</parametername>
</parameternamelist>
<parameterdescription>
<para>New width of the window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_height</parametername>
</parameternamelist>
<parameterdescription>
<para>New height of the window. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="151" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1a02cfbb8e0b1371fa2c6c04a227b4b330" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_r_d_e_1_1_vec2" kindref="compound">Vec2I</ref></type>
        <definition>Vec2I RDE::Window::getWindowSize</definition>
        <argsstring>() const</argsstring>
        <name>getWindowSize</name>
        <qualifiedname>RDE::Window::getWindowSize</qualifiedname>
        <briefdescription>
<para>Returns the size of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Vec2I </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="157" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1ac05203f5259bfee66e839a012232835b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_r_d_e_1_1_vec2" kindref="compound">Vec2I</ref></type>
        <definition>Vec2I RDE::Window::getDisplaySize</definition>
        <argsstring>() const</argsstring>
        <name>getDisplaySize</name>
        <qualifiedname>RDE::Window::getDisplaySize</qualifiedname>
        <briefdescription>
<para>Gets the size of the full display, which might be different from the size of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Vec2I </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="163" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1a4191c40242e05dffb4722cd54e670862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Window::setFullscreen</definition>
        <argsstring>(bool _fullscreen)</argsstring>
        <name>setFullscreen</name>
        <qualifiedname>RDE::Window::setFullscreen</qualifiedname>
        <param>
          <type>bool</type>
          <declname>_fullscreen</declname>
        </param>
        <briefdescription>
<para>Enables or disables fullscreen mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_fullscreen</parametername>
</parameternamelist>
<parameterdescription>
<para>True or false to enable/disable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="169" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1abf0cf7a6eca24ea26c1472237f93cf2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RDE::Window::isFullscreen</definition>
        <argsstring>() const</argsstring>
        <name>isFullscreen</name>
        <qualifiedname>RDE::Window::isFullscreen</qualifiedname>
        <briefdescription>
<para>Returns if screen is fullscreen or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="175" column="19"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1acc25bc86ed44515d0d760b239d8234dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Window::setEventCallback</definition>
        <argsstring>(const UniqueDelegate&lt; void(Event &amp;)&gt; &amp;_callback)</argsstring>
        <name>setEventCallback</name>
        <qualifiedname>RDE::Window::setEventCallback</qualifiedname>
        <param>
          <type>const <ref refid="struct_r_d_e_1_1_unique_delegate" kindref="compound">UniqueDelegate</ref>&lt; void(<ref refid="class_r_d_e_1_1_event" kindref="compound">Event</ref> &amp;)&gt; &amp;</type>
          <declname>_callback</declname>
        </param>
        <briefdescription>
<para>Sets the method that will be executed when a polled event triggers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>A void method with an <ref refid="class_r_d_e_1_1_event" kindref="compound">Event</ref>&amp; as parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="181" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1a961ac16e23d9cbe6f4f036b7f1e9c62f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Window::setVSync</definition>
        <argsstring>(bool _enable)</argsstring>
        <name>setVSync</name>
        <qualifiedname>RDE::Window::setVSync</qualifiedname>
        <param>
          <type>bool</type>
          <declname>_enable</declname>
        </param>
        <briefdescription>
<para>Enables or disables VSync. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True/false to enable/disable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="187" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1aa811c3aee2e1f4f44c5cea2ca9a361b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RDE::Window::isVSyncActive</definition>
        <argsstring>() const</argsstring>
        <name>isVSyncActive</name>
        <qualifiedname>RDE::Window::isVSyncActive</qualifiedname>
        <briefdescription>
<para>Returns if the VSync is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="193" column="19"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1ac39af607f7a795085e1c8bf0c2e1b27b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDL_Window *</type>
        <definition>SDL_Window * RDE::Window::getNativeWindow</definition>
        <argsstring>() const</argsstring>
        <name>getNativeWindow</name>
        <qualifiedname>RDE::Window::getNativeWindow</qualifiedname>
        <briefdescription>
<para>Returns a raw pointer to one of the <ref refid="class_r_d_e_1_1_window" kindref="compound">Window</ref> subclasses. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>SDL_Window* </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="199" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1ab56d50db5f388d1751940560ebd12fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDL_GLContext &amp;</type>
        <definition>SDL_GLContext &amp; RDE::Window::getContext</definition>
        <argsstring>()</argsstring>
        <name>getContext</name>
        <qualifiedname>RDE::Window::getContext</qualifiedname>
        <briefdescription>
<para>Returns the context of the <ref refid="class_r_d_e_1_1_window" kindref="compound">Window</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>SDL_GLContext&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="205" column="28"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1a7725c2d2aab14e2d059365d5be195a2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_r_d_e_1_1_vec2" kindref="compound">Vec2I</ref></type>
        <definition>Vec2I RDE::Window::getPosition</definition>
        <argsstring>() const</argsstring>
        <name>getPosition</name>
        <qualifiedname>RDE::Window::getPosition</qualifiedname>
        <briefdescription>
<para>Returns the position of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Vec2I </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="211" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1aaf17a065579a5d4ffa0ebc3a5c9b425c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Window::setPosition</definition>
        <argsstring>(const Vec2I &amp;_position)</argsstring>
        <name>setPosition</name>
        <qualifiedname>RDE::Window::setPosition</qualifiedname>
        <param>
          <type>const <ref refid="struct_r_d_e_1_1_vec2" kindref="compound">Vec2I</ref> &amp;</type>
          <declname>_position</declname>
        </param>
        <briefdescription>
<para>Sets the new position of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_position</parametername>
</parameternamelist>
<parameterdescription>
<para>Vec2I with the new [x,y] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="217" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1ac9b7fa2239a4fe6231712d7c512bfe83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Window::setIcon</definition>
        <argsstring>(const std::string &amp;_path)</argsstring>
        <name>setIcon</name>
        <qualifiedname>RDE::Window::setIcon</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>_path</declname>
        </param>
        <briefdescription>
<para>Sets the icon of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the icon, it can be png, jpg, jpeg, ico... </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="223" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1a63f71788ede059ee745e1ee39bd50bba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RDE::Window::isMinimized</definition>
        <argsstring>()</argsstring>
        <name>isMinimized</name>
        <qualifiedname>RDE::Window::isMinimized</qualifiedname>
        <briefdescription>
<para>Returns if the window is minimized or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="229" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1a1b6cb7da433c647b8a9252f876795a69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RDE::Window::isRunning</definition>
        <argsstring>()</argsstring>
        <name>isRunning</name>
        <qualifiedname>RDE::Window::isRunning</qualifiedname>
        <briefdescription>
<para>Returns if the <ref refid="class_r_d_e_1_1_window" kindref="compound">Window</ref> is running or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="235" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1a55abd62dbab6fe5819f358818b64cbed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RDE::Window::isFocused</definition>
        <argsstring>()</argsstring>
        <name>isFocused</name>
        <qualifiedname>RDE::Window::isFocused</qualifiedname>
        <briefdescription>
<para>Returns if the <ref refid="class_r_d_e_1_1_window" kindref="compound">Window</ref> is focused or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="241" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1ac3199826d9127685e6b45ede1dae9925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Window::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <qualifiedname>RDE::Window::stop</qualifiedname>
        <briefdescription>
<para>Makes the window to close and the application to exit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="246" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1aeed92dd8cee723b6ff4fc3c9959f9bbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Window::refreshDpi</definition>
        <argsstring>()</argsstring>
        <name>refreshDpi</name>
        <qualifiedname>RDE::Window::refreshDpi</qualifiedname>
        <briefdescription>
<para>Refresh inner calculations for new DPIs on the screen. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="251" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_window_1a44a68a623a13b5a05e81acb9595311c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Window::allowMouseToMoveOutOfWindow</definition>
        <argsstring>(bool _allow)</argsstring>
        <name>allowMouseToMoveOutOfWindow</name>
        <qualifiedname>RDE::Window::allowMouseToMoveOutOfWindow</qualifiedname>
        <param>
          <type>bool</type>
          <declname>_allow</declname>
        </param>
        <briefdescription>
<para>Traps the mouse inside the window or allows it to move outside. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_allow</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, mouse will be able to leave the window, otherwise it won&apos;t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/window/Window.h" line="257" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="11">
        <label>RDE::Delegate&lt; void()&gt;</label>
        <link refid="struct_r_d_e_1_1_delegate"/>
      </node>
      <node id="9">
        <label>RDE::Delegate&lt; void(const RDE::Vec2 &amp;)&gt;</label>
        <link refid="struct_r_d_e_1_1_delegate"/>
      </node>
      <node id="10">
        <label>RDE::Delegate&lt; void(int)&gt;</label>
        <link refid="struct_r_d_e_1_1_delegate"/>
      </node>
      <node id="7">
        <label>RDE::LocalizationConfig</label>
        <link refid="struct_r_d_e_1_1_localization_config"/>
      </node>
      <node id="3">
        <label>RDE::RDEConfig</label>
        <link refid="struct_r_d_e_1_1_r_d_e_config"/>
        <childnode refid="4" relation="usage">
          <edgelabel>windowData</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>projectData</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>RDE::RDEConfig::ProjectProperties</label>
        <link refid="struct_r_d_e_1_1_r_d_e_config_1_1_project_properties"/>
        <childnode refid="7" relation="usage">
          <edgelabel>localizationConfig</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>RDE::RDEConfig::WindowProperties</label>
        <link refid="struct_r_d_e_1_1_r_d_e_config_1_1_window_properties"/>
        <childnode refid="5" relation="usage">
          <edgelabel>resolution</edgelabel>
          <edgelabel>size</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>RDE::Window</label>
        <link refid="class_r_d_e_1_1_window"/>
        <childnode refid="2" relation="usage">
          <edgelabel>eventCallback</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>properties</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>shouldUpdateWindow</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>onWindowMovedCallback</edgelabel>
          <edgelabel>onWindowResizedCallback</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>onWindowDisplayChangedCallback</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>onWindowFocusedCallback</edgelabel>
          <edgelabel>onWindowMaximizedCallback</edgelabel>
          <edgelabel>onWindowMinimizedCallback</edgelabel>
          <edgelabel>onWindowUnfocusedCallback</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>RDE::UniqueDelegate&lt; bool()&gt;</label>
        <link refid="struct_r_d_e_1_1_unique_delegate"/>
      </node>
      <node id="2">
        <label>RDE::UniqueDelegate&lt; void(RDE::Event &amp;)&gt;</label>
        <link refid="struct_r_d_e_1_1_unique_delegate"/>
      </node>
      <node id="5">
        <label>RDE::Vec2&lt; int &gt;</label>
        <link refid="struct_r_d_e_1_1_vec2"/>
      </node>
    </collaborationgraph>
    <location file="engine/include/core/render/window/Window.h" line="18" column="5" bodyfile="engine/include/core/render/window/Window.h" bodystart="18" bodyend="258"/>
    <listofallmembers>
      <member refid="class_r_d_e_1_1_window_1a44a68a623a13b5a05e81acb9595311c4" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>allowMouseToMoveOutOfWindow</name></member>
      <member refid="class_r_d_e_1_1_window_1a6d603daaa2ca45eba8a31fe9dac1d8a2" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>consumeEvent</name></member>
      <member refid="class_r_d_e_1_1_window_1a5878bf1094d0b3f94e6125c83c499507" prot="protected" virt="non-virtual"><scope>RDE::Window</scope><name>context</name></member>
      <member refid="class_r_d_e_1_1_window_1ae4e00ac0ea93103eddf5b9de2a7b3ed0" prot="protected" virt="non-virtual"><scope>RDE::Window</scope><name>currentDisplayIndex</name></member>
      <member refid="class_r_d_e_1_1_window_1af5788b330cea1be6e0aa3119761faf83" prot="protected" virt="non-virtual"><scope>RDE::Window</scope><name>eventCallback</name></member>
      <member refid="class_r_d_e_1_1_window_1ab56d50db5f388d1751940560ebd12fc5" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>getContext</name></member>
      <member refid="class_r_d_e_1_1_window_1ac05203f5259bfee66e839a012232835b" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>getDisplaySize</name></member>
      <member refid="class_r_d_e_1_1_window_1a0900d5afd9c2bd7bea8a4a3dc1ee8131" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>getHeight</name></member>
      <member refid="class_r_d_e_1_1_window_1ac39af607f7a795085e1c8bf0c2e1b27b" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>getNativeWindow</name></member>
      <member refid="class_r_d_e_1_1_window_1a7725c2d2aab14e2d059365d5be195a2e" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>getPosition</name></member>
      <member refid="class_r_d_e_1_1_window_1af894fa4c9cc9c01bcf44970244ddf107" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>getTitle</name></member>
      <member refid="class_r_d_e_1_1_window_1a06adfa6654d3b81f94e2abd390ce46a2" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>getWidth</name></member>
      <member refid="class_r_d_e_1_1_window_1a02cfbb8e0b1371fa2c6c04a227b4b330" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>getWindowSize</name></member>
      <member refid="class_r_d_e_1_1_window_1a2723ef30eded7046316b60c5e2ecad91" prot="protected" virt="non-virtual"><scope>RDE::Window</scope><name>hasFocus</name></member>
      <member refid="class_r_d_e_1_1_window_1a55abd62dbab6fe5819f358818b64cbed" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>isFocused</name></member>
      <member refid="class_r_d_e_1_1_window_1abf0cf7a6eca24ea26c1472237f93cf2e" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>isFullscreen</name></member>
      <member refid="class_r_d_e_1_1_window_1a63f71788ede059ee745e1ee39bd50bba" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>isMinimized</name></member>
      <member refid="class_r_d_e_1_1_window_1a1b6cb7da433c647b8a9252f876795a69" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>isRunning</name></member>
      <member refid="class_r_d_e_1_1_window_1aa811c3aee2e1f4f44c5cea2ca9a361b5" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>isVSyncActive</name></member>
      <member refid="class_r_d_e_1_1_window_1acaca7091649341b024bdb9018939b42d" prot="protected" virt="non-virtual"><scope>RDE::Window</scope><name>minimized</name></member>
      <member refid="class_r_d_e_1_1_window_1ab21d334778b30af51e75d1982049d5aa" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>onWindowDisplayChangedCallback</name></member>
      <member refid="class_r_d_e_1_1_window_1a998cf8886d626fc685c4156efd88bd43" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>onWindowFocusedCallback</name></member>
      <member refid="class_r_d_e_1_1_window_1ac82df56cc46be179b4ba72ce4555e7ef" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>onWindowMaximizedCallback</name></member>
      <member refid="class_r_d_e_1_1_window_1a2598ababf850240119dbf292ce8c87c4" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>onWindowMinimizedCallback</name></member>
      <member refid="class_r_d_e_1_1_window_1a00046f5351f25882c0a0883a65a8ca6e" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>onWindowMovedCallback</name></member>
      <member refid="class_r_d_e_1_1_window_1a3dbb7e4927283f1bb09a66e1c058d2d8" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>onWindowResizedCallback</name></member>
      <member refid="class_r_d_e_1_1_window_1a989a25e37e6d7c923f4b0ee4a7593406" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>onWindowUnfocusedCallback</name></member>
      <member refid="class_r_d_e_1_1_window_1a1944fb82b70d199c5710bc59cb5c1dbc" prot="protected" virt="non-virtual"><scope>RDE::Window</scope><name>properties</name></member>
      <member refid="class_r_d_e_1_1_window_1aeed92dd8cee723b6ff4fc3c9959f9bbc" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>refreshDpi</name></member>
      <member refid="class_r_d_e_1_1_window_1a7179e1ce0f51c1655b179c784b451ec0" prot="protected" virt="non-virtual"><scope>RDE::Window</scope><name>running</name></member>
      <member refid="class_r_d_e_1_1_window_1acc25bc86ed44515d0d760b239d8234dd" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>setEventCallback</name></member>
      <member refid="class_r_d_e_1_1_window_1a4191c40242e05dffb4722cd54e670862" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>setFullscreen</name></member>
      <member refid="class_r_d_e_1_1_window_1ac9b7fa2239a4fe6231712d7c512bfe83" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>setIcon</name></member>
      <member refid="class_r_d_e_1_1_window_1aaf17a065579a5d4ffa0ebc3a5c9b425c" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>setPosition</name></member>
      <member refid="class_r_d_e_1_1_window_1affcffaa1d6bf402f6a2062cb526d6c66" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>setTitle</name></member>
      <member refid="class_r_d_e_1_1_window_1a961ac16e23d9cbe6f4f036b7f1e9c62f" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>setVSync</name></member>
      <member refid="class_r_d_e_1_1_window_1ae82b6fe5fffce7cb884c6e18e00599be" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>setWindowSize</name></member>
      <member refid="class_r_d_e_1_1_window_1abebb751d39e74f7aa160187126389307" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>shouldUpdateWindow</name></member>
      <member refid="class_r_d_e_1_1_window_1ac3199826d9127685e6b45ede1dae9925" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>stop</name></member>
      <member refid="class_r_d_e_1_1_window_1a009b5f0631b267e7f2179b5d3a9abcfe" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>update</name></member>
      <member refid="class_r_d_e_1_1_window_1a30104847fe5878ca35ab382b7bb9f129" prot="protected" virt="non-virtual"><scope>RDE::Window</scope><name>Window</name></member>
      <member refid="class_r_d_e_1_1_window_1af6869525aa5e57287463890e6e8c1aca" prot="protected" virt="non-virtual"><scope>RDE::Window</scope><name>window</name></member>
      <member refid="class_r_d_e_1_1_window_1a066553f781c5bd3fb982cbf04e7c1335" prot="private" virt="non-virtual"><scope>RDE::Window</scope><name>WindowInput</name></member>
      <member refid="class_r_d_e_1_1_window_1a5f3223e2b54f6b564e38e270cd1e8cf9" prot="public" virt="non-virtual"><scope>RDE::Window</scope><name>~Window</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
