<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="class_r_d_e_1_1_scene" kind="class" language="C++" prot="public">
    <compoundname>RDE::Scene</compoundname>
    <derivedcompoundref refid="class_r_d_e_1_1_im_gui_scene" prot="public" virt="non-virtual">RDE::ImGuiScene</derivedcompoundref>
    <includes refid="_scene_8h" local="no">Scene.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_r_d_e_1_1_scene_1afab89afd724f1b07b1aaad6bdc61c47a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Graph</definition>
        <argsstring></argsstring>
        <name>Graph</name>
        <qualifiedname>RDE::Scene::Graph</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_graph" kindref="compound">Graph</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="22" column="22" bodyfile="engine/include/core/graph/Scene.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_r_d_e_1_1_scene_1aed8714396345e5fc5b1a2bf7ccaed500" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class ConfigManager</definition>
        <argsstring></argsstring>
        <name>ConfigManager</name>
        <qualifiedname>RDE::Scene::ConfigManager</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_config_manager" kindref="compound">ConfigManager</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="23" column="22" bodyfile="engine/include/core/graph/Scene.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_r_d_e_1_1_scene_1a066553f781c5bd3fb982cbf04e7c1335" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class WindowInput</definition>
        <argsstring></argsstring>
        <name>WindowInput</name>
        <qualifiedname>RDE::Scene::WindowInput</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_window_input" kindref="compound">WindowInput</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="24" column="22" bodyfile="engine/include/core/graph/Scene.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_r_d_e_1_1_scene_1a3e1914489e4bed4f9f23cdeab34a43dc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Engine</definition>
        <argsstring></argsstring>
        <name>Engine</name>
        <qualifiedname>RDE::Scene::Engine</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_engine" kindref="compound">Engine</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="25" column="22" bodyfile="engine/include/core/graph/Scene.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_r_d_e_1_1_scene_1af4f241a517f779b649085b1b171a83b1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class ImGuiScene</definition>
        <argsstring></argsstring>
        <name>ImGuiScene</name>
        <qualifiedname>RDE::Scene::ImGuiScene</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_im_gui_scene" kindref="compound">ImGuiScene</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="26" column="22" bodyfile="engine/include/core/graph/Scene.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_r_d_e_1_1_scene_1a284464b0561a6f2915f04b0245b987f0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class SceneManager</definition>
        <argsstring></argsstring>
        <name>SceneManager</name>
        <qualifiedname>RDE::Scene::SceneManager</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_scene_manager" kindref="compound">SceneManager</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="27" column="22" bodyfile="engine/include/core/graph/Scene.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_r_d_e_1_1_scene_1a60c78fb54ae93e935544f04736487946" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_r_d_e_1_1_camera" kindref="compound">Camera</ref> * &gt;</type>
        <definition>std::vector&lt;Camera*&gt; RDE::Scene::cameras</definition>
        <argsstring></argsstring>
        <name>cameras</name>
        <qualifiedname>RDE::Scene::cameras</qualifiedname>
        <briefdescription>
<para>All of the cameras that will render the scene. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="33" column="25" bodyfile="engine/include/core/graph/Scene.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_scene_1a43da5e07cfaef8025777f52fc537da13" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, <ref refid="namespace_r_d_e_1a9feedbb7b8355f0ee9c64cfaa2a474d1" kindref="member">NodeID</ref> &gt;</type>
        <definition>std::unordered_map&lt;std::string, NodeID&gt; RDE::Scene::prefabs</definition>
        <argsstring></argsstring>
        <name>prefabs</name>
        <qualifiedname>RDE::Scene::prefabs</qualifiedname>
        <briefdescription>
<para>Map PrefabKey -&gt; NodeID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="38" column="32" bodyfile="engine/include/core/graph/Scene.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_r_d_e_1_1_scene_1aea061d05b77210b98fc7843b07f41737" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string RDE::Scene::debugName</definition>
        <argsstring></argsstring>
        <name>debugName</name>
        <qualifiedname>RDE::Scene::debugName</qualifiedname>
        <briefdescription>
<para><ref refid="class_r_d_e_1_1_scene" kindref="compound">Scene</ref> name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="44" column="25" bodyfile="engine/include/core/graph/Scene.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_scene_1afa4ac232dc674e635282b8fb05cb29d1" prot="public" static="no" mutable="no">
        <type><ref refid="class_r_d_e_1_1_engine" kindref="compound">Engine</ref> *</type>
        <definition>Engine* RDE::Scene::engine</definition>
        <argsstring></argsstring>
        <name>engine</name>
        <qualifiedname>RDE::Scene::engine</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_r_d_e_1_1_engine" kindref="compound">Engine</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="49" column="20" bodyfile="engine/include/core/graph/Scene.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_scene_1aae0da907049c45cbdb454e366a335622" prot="public" static="no" mutable="no">
        <type><ref refid="class_r_d_e_1_1_graph" kindref="compound">Graph</ref> *</type>
        <definition>Graph* RDE::Scene::graph</definition>
        <argsstring></argsstring>
        <name>graph</name>
        <qualifiedname>RDE::Scene::graph</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para><ref refid="class_r_d_e_1_1_graph" kindref="compound">Graph</ref> for entities hierarchy. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_r_d_e_1_1_graph" kindref="compound">Graph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="55" column="19" bodyfile="engine/include/core/graph/Scene.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_scene_1ad3235cf59500100dfe9db64758fea45d" prot="public" static="no" mutable="no">
        <type><ref refid="class_r_d_e_1_1_canvas" kindref="compound">Canvas</ref> *</type>
        <definition>Canvas* RDE::Scene::canvas</definition>
        <argsstring></argsstring>
        <name>canvas</name>
        <qualifiedname>RDE::Scene::canvas</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>All of the UI canvases that the scene has. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="60" column="20" bodyfile="engine/include/core/graph/Scene.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_scene_1a4a9a5c34ee8f930e02273a32abc4c702" prot="public" static="no" mutable="no">
        <type><ref refid="class_r_d_e_1_1_camera" kindref="compound">Camera</ref> *</type>
        <definition>Camera* RDE::Scene::mainCamera</definition>
        <argsstring></argsstring>
        <name>mainCamera</name>
        <qualifiedname>RDE::Scene::mainCamera</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Main camera renderer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="65" column="20" bodyfile="engine/include/core/graph/Scene.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a94a9eb92a56862835c7efcc00db2d0c7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onDisplayChanged</definition>
        <argsstring>()</argsstring>
        <name>onDisplayChanged</name>
        <qualifiedname>RDE::Scene::onDisplayChanged</qualifiedname>
        <briefdescription>
<para>Callback for the <ref refid="class_r_d_e_1_1_scene" kindref="compound">Scene</ref> to refresh whatever is needed if the display is changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="71" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a3dcf9b2f790f80884c7cf124667f4774" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerEvent</definition>
        <argsstring>(Event &amp;_event)</argsstring>
        <name>onInnerEvent</name>
        <qualifiedname>RDE::Scene::onInnerEvent</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_event" kindref="compound">Event</ref> &amp;</type>
          <declname>_event</declname>
        </param>
        <briefdescription>
<para>This function captures all the events that happen inside the application. It captures too mouse, keyboard and gamepads, but it is not recommended to use this input inside this function. The class <ref refid="class_r_d_e_1_1_input_manager" kindref="compound">InputManager</ref> is the one you are looking for. This is used to manage window related or screen related events mainly. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_event</parametername>
</parameternamelist>
<parameterdescription>
<para>the event that was just captured. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_r_d_e_1_1_input_manager" kindref="compound">InputManager</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="80" column="18" bodyfile="engine/include/core/graph/Scene.h" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a7aa68d1910d7f396a41efa82aaa3a0a7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerEventHierarchy</definition>
        <argsstring>(Event &amp;_event)</argsstring>
        <name>onInnerEventHierarchy</name>
        <qualifiedname>RDE::Scene::onInnerEventHierarchy</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_event" kindref="compound">Event</ref> &amp;</type>
          <declname>_event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="86" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a98f7e95734c85ee6eaf6a81ca0d6f1ef" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerEventUI</definition>
        <argsstring>(Event &amp;_event)</argsstring>
        <name>onInnerEventUI</name>
        <qualifiedname>RDE::Scene::onInnerEventUI</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_event" kindref="compound">Event</ref> &amp;</type>
          <declname>_event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="87" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1aeeee37aeedfb3a43a0d2c0f46761b4dc" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerUpdate</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onInnerUpdate</name>
        <qualifiedname>RDE::Scene::onInnerUpdate</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
<para>This function is executed every frame of the application and here we should update logic and take inputs to update the logic and components. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_dt</parametername>
</parameternamelist>
<parameterdescription>
<para>time that passed between the current frame and the last one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="94" column="18" bodyfile="engine/include/core/graph/Scene.h" bodystart="94" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a6e9dcde9a7267050f1f41482615de41b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerUpdateHierarchy</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onInnerUpdateHierarchy</name>
        <qualifiedname>RDE::Scene::onInnerUpdateHierarchy</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="99" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a32c2d49169153e07110661b275e2b191" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerUpdateUI</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onInnerUpdateUI</name>
        <qualifiedname>RDE::Scene::onInnerUpdateUI</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="100" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1ac9eb043f50a90e6619a179f6f1a1f1bb" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerFixedUpdate</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onInnerFixedUpdate</name>
        <qualifiedname>RDE::Scene::onInnerFixedUpdate</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
<para>This function is called a fixed amount of times per second. By default it is 60 times per second, but it can be modified with Engine/setFixedDelta. This loop is used to handle physics and things that need a consistent frame rate to work properly. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_dt</parametername>
</parameternamelist>
<parameterdescription>
<para>fixed value initially set at 1/60/ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="108" column="18" bodyfile="engine/include/core/graph/Scene.h" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a8345888e1c95f4686cee78d06d649a02" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerFixedUpdateHierarchy</definition>
        <argsstring>(Delta _dtt)</argsstring>
        <name>onInnerFixedUpdateHierarchy</name>
        <qualifiedname>RDE::Scene::onInnerFixedUpdateHierarchy</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dtt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="113" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a2bd1519a85c3b2b2a9dc6a63dabaab4e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerFixedUpdateUI</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onInnerFixedUpdateUI</name>
        <qualifiedname>RDE::Scene::onInnerFixedUpdateUI</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="114" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a7cc78eed9a314f027d68eb1d9e94e809" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerLateUpdate</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onInnerLateUpdate</name>
        <qualifiedname>RDE::Scene::onInnerLateUpdate</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
<para>This function is called as the last update method, after update and fixedUpdate, which is an ideal place to remove elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_dt</parametername>
</parameternamelist>
<parameterdescription>
<para>time that passed between the current frame and the last one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="121" column="18" bodyfile="engine/include/core/graph/Scene.h" bodystart="121" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a5cda270df9a9e7e293f9bdf64946b095" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerLateUpdateHierarchy</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onInnerLateUpdateHierarchy</name>
        <qualifiedname>RDE::Scene::onInnerLateUpdateHierarchy</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="126" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1abe2cf4be993b75fbddb46d083d2c9402" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerLateUpdateUI</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onInnerLateUpdateUI</name>
        <qualifiedname>RDE::Scene::onInnerLateUpdateUI</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="127" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a2d4b686078ec833fd4170aca973e0a5b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::recalculateRenderizableTree</definition>
        <argsstring>(Node *_node)</argsstring>
        <name>recalculateRenderizableTree</name>
        <qualifiedname>RDE::Scene::recalculateRenderizableTree</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="129" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a09afbcd53b605f67a9475c467ccca966" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::recalculateRenderizableTreeUI</definition>
        <argsstring>(Node *_node)</argsstring>
        <name>recalculateRenderizableTreeUI</name>
        <qualifiedname>RDE::Scene::recalculateRenderizableTreeUI</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="130" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a3090da5c4f6bb02a1e4200b77434628b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerRender</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onInnerRender</name>
        <qualifiedname>RDE::Scene::onInnerRender</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
<para>This function is also called every frame and renders the geometry of the game. It is not virtual because the main rendering pipeline is handled inside the core of the engine. Users don&apos;t need to mess with it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_dt</parametername>
</parameternamelist>
<parameterdescription>
<para>the time that passed between the current frame and the last one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="137" column="18" bodyfile="engine/include/core/graph/Scene.h" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a491d38fc9d02d3d8b4a3476a570bf051" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerRenderHierarchy</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onInnerRenderHierarchy</name>
        <qualifiedname>RDE::Scene::onInnerRenderHierarchy</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="141" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1ac61128ab369624f53d0ff7d6ccd4659f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerRenderUI</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onInnerRenderUI</name>
        <qualifiedname>RDE::Scene::onInnerRenderUI</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="142" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a69163257e3ae1fb02a882e5d4cdf9796" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::postRenderSync</definition>
        <argsstring>()</argsstring>
        <name>postRenderSync</name>
        <qualifiedname>RDE::Scene::postRenderSync</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="144" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1ace97848a19bd8364af76370e39b30c8b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::postRenderSyncUI</definition>
        <argsstring>()</argsstring>
        <name>postRenderSyncUI</name>
        <qualifiedname>RDE::Scene::postRenderSyncUI</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="145" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a50fa39ffbc9efd9b2df0ef255b7bb689" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerDebugRender</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onInnerDebugRender</name>
        <qualifiedname>RDE::Scene::onInnerDebugRender</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
<para>This function is used to drawBatched debugging lines, squares, circles... </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>time that passed between the current frame and the last one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="151" column="18" bodyfile="engine/include/core/graph/Scene.h" bodystart="151" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a870645360c04836cd0b8b92675498a4e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerDebugRenderHierarchy</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onInnerDebugRenderHierarchy</name>
        <qualifiedname>RDE::Scene::onInnerDebugRenderHierarchy</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="156" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a2e87ac52be939606583149b2b5952d05" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::onInnerDebugRenderUI</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onInnerDebugRenderUI</name>
        <qualifiedname>RDE::Scene::onInnerDebugRenderUI</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="157" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a7481e65138731d137bf590765b30b4ba" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>RDE::Scene::Scene</definition>
        <argsstring>(Engine *_engine, const std::string &amp;_debugName=&quot;Scene&quot;)</argsstring>
        <name>Scene</name>
        <qualifiedname>RDE::Scene::Scene</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_engine" kindref="compound">Engine</ref> *</type>
          <declname>_engine</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_debugName</declname>
          <defval>&quot;Scene&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="160" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a23589dc2561bead6d74ab9ca96fbee62" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual RDE::Scene::~Scene</definition>
        <argsstring>()</argsstring>
        <name>~Scene</name>
        <qualifiedname>RDE::Scene::~Scene</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="161" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a1abad6512acb752b7ae00831bfd4b3f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void RDE::Scene::preInit</definition>
        <argsstring>(Manager *_manager, Window *_window, const nlohmann::json &amp;_sceneJson)</argsstring>
        <name>preInit</name>
        <qualifiedname>RDE::Scene::preInit</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_manager" kindref="compound">Manager</ref> *</type>
          <declname>_manager</declname>
        </param>
        <param>
          <type><ref refid="class_r_d_e_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>_window</declname>
        </param>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>_sceneJson</declname>
        </param>
        <briefdescription>
<para>This function is called when loading the scene from the configuration, it is used to make a custom loading of your custom components for the internal ECS system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_manager</parametername>
</parameternamelist>
<parameterdescription>
<para>gives access to all of the managers of the engine to load anything needed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_window</parametername>
</parameternamelist>
<parameterdescription>
<para>the window of the application </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_sceneJson</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration of the .yaml file used to load the scene </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="170" column="26" bodyfile="engine/include/core/graph/Scene.h" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a5f93bed54b22e5834a352892e3350f1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void RDE::Scene::onInit</definition>
        <argsstring>()</argsstring>
        <name>onInit</name>
        <qualifiedname>RDE::Scene::onInit</qualifiedname>
        <reimplementedby refid="class_r_d_e_1_1_im_gui_scene_1add6967fcb39d1d13c7063c46fdb4c705">onInit</reimplementedby>
        <briefdescription>
<para>This function is called only once and when the SceneManager/displayScene is invoked. It is used to initialized any needed values of the scene. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="176" column="26" bodyfile="engine/include/core/graph/Scene.h" bodystart="176" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1aa9af7f58691de79d8f6f01da410779c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void RDE::Scene::onEvent</definition>
        <argsstring>(Event &amp;_event)</argsstring>
        <name>onEvent</name>
        <qualifiedname>RDE::Scene::onEvent</qualifiedname>
        <reimplementedby refid="class_r_d_e_1_1_im_gui_scene_1adc5ff0fae7bc9fc6868f9918e6c23596">onEvent</reimplementedby>
        <param>
          <type><ref refid="class_r_d_e_1_1_event" kindref="compound">Event</ref> &amp;</type>
          <declname>_event</declname>
        </param>
        <briefdescription>
<para>This function captures all the events that happen inside the application. It captures too mouse, keyboard and gamepads, but it is not recommended to use this input inside this function. The class <ref refid="class_r_d_e_1_1_input_manager" kindref="compound">InputManager</ref> is the one you are looking for. This is used to manage window related or screen related events mainly. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_event</parametername>
</parameternamelist>
<parameterdescription>
<para>the event that was just captured. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_r_d_e_1_1_input_manager" kindref="compound">InputManager</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="185" column="26" bodyfile="engine/include/core/graph/Scene.h" bodystart="185" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a538c7f27e8686c6265770cce4b2016f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void RDE::Scene::onUpdate</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onUpdate</name>
        <qualifiedname>RDE::Scene::onUpdate</qualifiedname>
        <reimplementedby refid="class_r_d_e_1_1_im_gui_scene_1a8291c285655bb8a17776fff2da61f219">onUpdate</reimplementedby>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
<para>This function is executed every frame of the application and here we should update logic and take inputs to update the logic and components. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_dt</parametername>
</parameternamelist>
<parameterdescription>
<para>time that passed between the current frame and the last one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="192" column="26" bodyfile="engine/include/core/graph/Scene.h" bodystart="192" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1aae3f084bca9e26bdd4a2849c126bb16f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void RDE::Scene::onFixedUpdate</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onFixedUpdate</name>
        <qualifiedname>RDE::Scene::onFixedUpdate</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
<para>This function is called a fixed amount of times per second. By default it is 60 times per second, but it can be modified with Engine/setFixedDelta. This loop is used to handle physics and things that need a consistent frame rate to work properly. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_dt</parametername>
</parameternamelist>
<parameterdescription>
<para>fixed value initially set at 1/60/ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="200" column="26" bodyfile="engine/include/core/graph/Scene.h" bodystart="200" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a46c3ec5f961753bce8c33e0188a243ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void RDE::Scene::onLateUpdate</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onLateUpdate</name>
        <qualifiedname>RDE::Scene::onLateUpdate</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
<para>This function is called as the last update method, after update and fixedUpdate, which is an ideal place to remove elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_dt</parametername>
</parameternamelist>
<parameterdescription>
<para>time that passed between the current frame and the last one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="207" column="26" bodyfile="engine/include/core/graph/Scene.h" bodystart="207" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1adcae6a87d1b027af90064c68aa218edd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void RDE::Scene::onImGuiRender</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onImGuiRender</name>
        <qualifiedname>RDE::Scene::onImGuiRender</qualifiedname>
        <reimplementedby refid="class_r_d_e_1_1_im_gui_scene_1a5904bdd0eb2270544ef2a9e034542b22">onImGuiRender</reimplementedby>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
<para>This function is used to render specifically ImGui elements, nothing else. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>time that passed between the current frame and the last one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="213" column="26" bodyfile="engine/include/core/graph/Scene.h" bodystart="213" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1aa78dbdad2c06ad8fc6a2f658bf296f41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void RDE::Scene::onDebugRender</definition>
        <argsstring>(Delta _dt)</argsstring>
        <name>onDebugRender</name>
        <qualifiedname>RDE::Scene::onDebugRender</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_delta" kindref="compound">Delta</ref></type>
          <declname>_dt</declname>
        </param>
        <briefdescription>
<para>This function is used to drawBatched debugging lines, squares, circles... </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>time that passed between the current frame and the last one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="219" column="26" bodyfile="engine/include/core/graph/Scene.h" bodystart="219" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a934540e9d0ea6ef49d4bd9a359421a63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void RDE::Scene::onEnd</definition>
        <argsstring>()</argsstring>
        <name>onEnd</name>
        <qualifiedname>RDE::Scene::onEnd</qualifiedname>
        <reimplementedby refid="class_r_d_e_1_1_im_gui_scene_1a28e1691c255895501b07d81aaa2bb9e0">onEnd</reimplementedby>
        <briefdescription>
<para>This function is called when unloading the scene and should be used to release any allocated memory or resources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="225" column="26" bodyfile="engine/include/core/graph/Scene.h" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a4183a9b7dc2924ed74b22644ce83baae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_r_d_e_1_1_camera" kindref="compound">Camera</ref> * &gt; &amp;</type>
        <definition>std::vector&lt; Camera * &gt; &amp; RDE::Scene::getCameras</definition>
        <argsstring>()</argsstring>
        <name>getCameras</name>
        <qualifiedname>RDE::Scene::getCameras</qualifiedname>
        <briefdescription>
<para>Returns all of the cameras used in the scene. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;Camera*&gt;&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="231" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a3b7c48b3120e76737e41d38a03d54c9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_r_d_e_1_1_camera" kindref="compound">Camera</ref> *</type>
        <definition>Camera * RDE::Scene::addCamera</definition>
        <argsstring>(Window *window)</argsstring>
        <name>addCamera</name>
        <qualifiedname>RDE::Scene::addCamera</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Adds a new camera to the scene and returns it to make any modifications needed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_window" kindref="compound">Window</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Camera* </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="238" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1aa0f7e1c45ff4c1ffe8d3c1947f15888a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::enableCamera</definition>
        <argsstring>(Node *_camera, bool _enable)</argsstring>
        <name>enableCamera</name>
        <qualifiedname>RDE::Scene::enableCamera</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>_camera</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>_enable</declname>
        </param>
        <briefdescription>
<para>Activates or deactivates any given camera. If it is disabled, it won&apos;t render anything. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cameraID</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_camera" kindref="compound">Camera</ref> to enable or disable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_enable</parametername>
</parameternamelist>
<parameterdescription>
<para>If the camera gets enabled or disabled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="245" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a9bce14fb3192f8cb5a206ff12dd8d4e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::removeCamera</definition>
        <argsstring>(Node *_camera)</argsstring>
        <name>removeCamera</name>
        <qualifiedname>RDE::Scene::removeCamera</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>_camera</declname>
        </param>
        <briefdescription>
<para>Destroys a specific camera of the scene. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cameraID</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_camera" kindref="compound">Camera</ref> to be destroyed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="251" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a1cc41c6cc031495a6e618d4f02a03c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Scene::switchMainCamera</definition>
        <argsstring>(Node *_camera)</argsstring>
        <name>switchMainCamera</name>
        <qualifiedname>RDE::Scene::switchMainCamera</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>_camera</declname>
        </param>
        <briefdescription>
<para>Sets an specific camera as the main one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_camera</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_camera" kindref="compound">Camera</ref> to be set as main </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="257" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a23c54ca1cc6bf3ab183df90155a5ede2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; RDE::Scene::getName</definition>
        <argsstring>() const</argsstring>
        <name>getName</name>
        <qualifiedname>RDE::Scene::getName</qualifiedname>
        <briefdescription>
<para>Returns the name of the scene. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const std::string&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="263" column="32" bodyfile="engine/include/core/graph/Scene.h" bodystart="263" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1a276d0a3ad5704e603ab68971a5310c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_r_d_e_1a9feedbb7b8355f0ee9c64cfaa2a474d1" kindref="member">NodeID</ref> &gt;</type>
        <definition>std::vector&lt; NodeID &gt; RDE::Scene::getPrefabs</definition>
        <argsstring>()</argsstring>
        <name>getPrefabs</name>
        <qualifiedname>RDE::Scene::getPrefabs</qualifiedname>
        <briefdescription>
<para>Returns all of the prefabs IDs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;NodeID&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="269" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_scene_1ac56a07a6bba79822346ff051294a0129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_r_d_e_1a9feedbb7b8355f0ee9c64cfaa2a474d1" kindref="member">NodeID</ref></type>
        <definition>NodeID RDE::Scene::getPrefab</definition>
        <argsstring>(const std::string &amp;_prefabKey)</argsstring>
        <name>getPrefab</name>
        <qualifiedname>RDE::Scene::getPrefab</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>_prefabKey</declname>
        </param>
        <briefdescription>
<para>Returns a prefab by its key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_prefabKey</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefab key </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NodeID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Scene.h" line="276" column="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class represents what is rendered in the window and all its related systems. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>RDE::ImGuiScene</label>
        <link refid="class_r_d_e_1_1_im_gui_scene"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>RDE::Scene</label>
        <link refid="class_r_d_e_1_1_scene"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="30">
        <label>ComponentBase</label>
        <link refid="struct_component_base"/>
      </node>
      <node id="29">
        <label>RDE::Camera</label>
        <link refid="class_r_d_e_1_1_camera"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>RDE::Canvas</label>
        <link refid="class_r_d_e_1_1_canvas"/>
        <childnode refid="26" relation="usage">
          <edgelabel>graph</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>RDE::Color</label>
        <link refid="struct_r_d_e_1_1_color"/>
        <childnode refid="15" relation="usage">
          <edgelabel>Black</edgelabel>
          <edgelabel>Blue</edgelabel>
          <edgelabel>Brown</edgelabel>
          <edgelabel>Disabled</edgelabel>
          <edgelabel>Gray</edgelabel>
          <edgelabel>Green</edgelabel>
          <edgelabel>Magenta</edgelabel>
          <edgelabel>NO_COLOR</edgelabel>
          <edgelabel>Orange</edgelabel>
          <edgelabel>Placeholder</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>RDE::ConfigManager</label>
        <link refid="class_r_d_e_1_1_config_manager"/>
      </node>
      <node id="10">
        <label>RDE::Console</label>
        <link refid="class_r_d_e_1_1_console"/>
      </node>
      <node id="17">
        <label>RDE::ControllerVibrationManager</label>
        <link refid="class_r_d_e_1_1_controller_vibration_manager"/>
      </node>
      <node id="14">
        <label>RDE::DebugOptions</label>
        <link refid="struct_r_d_e_1_1_debug_options"/>
        <childnode refid="15" relation="usage">
          <edgelabel>boxLineColor</edgelabel>
          <edgelabel>boxRadiusColor</edgelabel>
          <edgelabel>circleLineColor</edgelabel>
          <edgelabel>circleRadiusColor</edgelabel>
          <edgelabel>polygonLineColor</edgelabel>
          <edgelabel>polygonRadiusColor</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>RDE::ECSManager</label>
        <link refid="class_r_d_e_1_1_e_c_s_manager"/>
      </node>
      <node id="2">
        <label>RDE::Engine</label>
        <link refid="class_r_d_e_1_1_engine"/>
        <childnode refid="3" relation="usage">
          <edgelabel>manager</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>rdeConfig</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>RDE::FileManager</label>
        <link refid="class_r_d_e_1_1_file_manager"/>
      </node>
      <node id="7">
        <label>RDE::FontManager</label>
        <link refid="class_r_d_e_1_1_font_manager"/>
      </node>
      <node id="26">
        <label>RDE::Graph</label>
        <link refid="class_r_d_e_1_1_graph"/>
        <childnode refid="27" relation="usage">
          <edgelabel>onEventDel</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>RDE::InputManager</label>
        <link refid="class_r_d_e_1_1_input_manager"/>
      </node>
      <node id="25">
        <label>RDE::LocalizationConfig</label>
        <link refid="struct_r_d_e_1_1_localization_config"/>
      </node>
      <node id="20">
        <label>RDE::LocalizationInfo</label>
        <link refid="struct_r_d_e_1_1_localization_info"/>
      </node>
      <node id="19">
        <label>RDE::LocalizationManager</label>
        <link refid="class_r_d_e_1_1_localization_manager"/>
        <childnode refid="20" relation="usage">
          <edgelabel>localizationInfo</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>RDE::Manager</label>
        <link refid="class_r_d_e_1_1_manager"/>
        <childnode refid="2" relation="usage">
          <edgelabel>engine</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>configManager</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>textureManager</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>shaderManager</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>fontManager</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>soundManager</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>inputManager</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>consoleManager</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>sceneManager</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>ecsManager</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>physics</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>fileManager</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>controllerVibrationManager</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>renderManager</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>localizationManager</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>RDE::Node</label>
        <link refid="struct_r_d_e_1_1_node"/>
      </node>
      <node id="13">
        <label>RDE::PhysicsManager</label>
        <link refid="class_r_d_e_1_1_physics_manager"/>
        <childnode refid="14" relation="usage">
          <edgelabel>debugOptions</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>RDE::RDEConfig</label>
        <link refid="struct_r_d_e_1_1_r_d_e_config"/>
        <childnode refid="22" relation="usage">
          <edgelabel>windowData</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>projectData</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>RDE::RDEConfig::ProjectProperties</label>
        <link refid="struct_r_d_e_1_1_r_d_e_config_1_1_project_properties"/>
        <childnode refid="25" relation="usage">
          <edgelabel>localizationConfig</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>RDE::RDEConfig::WindowProperties</label>
        <link refid="struct_r_d_e_1_1_r_d_e_config_1_1_window_properties"/>
        <childnode refid="23" relation="usage">
          <edgelabel>resolution</edgelabel>
          <edgelabel>size</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>RDE::RenderManager</label>
        <link refid="class_r_d_e_1_1_render_manager"/>
      </node>
      <node id="1">
        <label>RDE::Scene</label>
        <link refid="class_r_d_e_1_1_scene"/>
        <childnode refid="2" relation="usage">
          <edgelabel>engine</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>graph</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>canvas</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>mainCamera</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>RDE::SceneManager</label>
        <link refid="class_r_d_e_1_1_scene_manager"/>
      </node>
      <node id="6">
        <label>RDE::ShaderManager</label>
        <link refid="class_r_d_e_1_1_shader_manager"/>
      </node>
      <node id="8">
        <label>RDE::SoundManager</label>
        <link refid="class_r_d_e_1_1_sound_manager"/>
      </node>
      <node id="5">
        <label>RDE::TextureAtlasManager</label>
        <link refid="class_r_d_e_1_1_texture_atlas_manager"/>
      </node>
      <node id="27">
        <label>RDE::UniqueDelegate&lt; void(NodeContainer &amp;, RDE::Event &amp;)&gt;</label>
        <link refid="struct_r_d_e_1_1_unique_delegate"/>
      </node>
      <node id="23">
        <label>RDE::Vec2&lt; int &gt;</label>
        <link refid="struct_r_d_e_1_1_vec2"/>
      </node>
    </collaborationgraph>
    <location file="engine/include/core/graph/Scene.h" line="21" column="5" bodyfile="engine/include/core/graph/Scene.h" bodystart="21" bodyend="277"/>
    <listofallmembers>
      <member refid="class_r_d_e_1_1_scene_1a3b7c48b3120e76737e41d38a03d54c9d" prot="public" virt="non-virtual"><scope>RDE::Scene</scope><name>addCamera</name></member>
      <member refid="class_r_d_e_1_1_scene_1a60c78fb54ae93e935544f04736487946" prot="private" virt="non-virtual"><scope>RDE::Scene</scope><name>cameras</name></member>
      <member refid="class_r_d_e_1_1_scene_1ad3235cf59500100dfe9db64758fea45d" prot="public" virt="non-virtual"><scope>RDE::Scene</scope><name>canvas</name></member>
      <member refid="class_r_d_e_1_1_scene_1aed8714396345e5fc5b1a2bf7ccaed500" prot="private" virt="non-virtual"><scope>RDE::Scene</scope><name>ConfigManager</name></member>
      <member refid="class_r_d_e_1_1_scene_1aea061d05b77210b98fc7843b07f41737" prot="public" virt="non-virtual"><scope>RDE::Scene</scope><name>debugName</name></member>
      <member refid="class_r_d_e_1_1_scene_1aa0f7e1c45ff4c1ffe8d3c1947f15888a" prot="public" virt="non-virtual"><scope>RDE::Scene</scope><name>enableCamera</name></member>
      <member refid="class_r_d_e_1_1_scene_1a3e1914489e4bed4f9f23cdeab34a43dc" prot="private" virt="non-virtual"><scope>RDE::Scene</scope><name>Engine</name></member>
      <member refid="class_r_d_e_1_1_scene_1afa4ac232dc674e635282b8fb05cb29d1" prot="public" virt="non-virtual"><scope>RDE::Scene</scope><name>engine</name></member>
      <member refid="class_r_d_e_1_1_scene_1a4183a9b7dc2924ed74b22644ce83baae" prot="public" virt="non-virtual"><scope>RDE::Scene</scope><name>getCameras</name></member>
      <member refid="class_r_d_e_1_1_scene_1a23c54ca1cc6bf3ab183df90155a5ede2" prot="public" virt="non-virtual"><scope>RDE::Scene</scope><name>getName</name></member>
      <member refid="class_r_d_e_1_1_scene_1ac56a07a6bba79822346ff051294a0129" prot="public" virt="non-virtual"><scope>RDE::Scene</scope><name>getPrefab</name></member>
      <member refid="class_r_d_e_1_1_scene_1a276d0a3ad5704e603ab68971a5310c51" prot="public" virt="non-virtual"><scope>RDE::Scene</scope><name>getPrefabs</name></member>
      <member refid="class_r_d_e_1_1_scene_1afab89afd724f1b07b1aaad6bdc61c47a" prot="private" virt="non-virtual"><scope>RDE::Scene</scope><name>Graph</name></member>
      <member refid="class_r_d_e_1_1_scene_1aae0da907049c45cbdb454e366a335622" prot="public" virt="non-virtual"><scope>RDE::Scene</scope><name>graph</name></member>
      <member refid="class_r_d_e_1_1_scene_1af4f241a517f779b649085b1b171a83b1" prot="private" virt="non-virtual"><scope>RDE::Scene</scope><name>ImGuiScene</name></member>
      <member refid="class_r_d_e_1_1_scene_1a4a9a5c34ee8f930e02273a32abc4c702" prot="public" virt="non-virtual"><scope>RDE::Scene</scope><name>mainCamera</name></member>
      <member refid="class_r_d_e_1_1_scene_1aa78dbdad2c06ad8fc6a2f658bf296f41" prot="public" virt="virtual"><scope>RDE::Scene</scope><name>onDebugRender</name></member>
      <member refid="class_r_d_e_1_1_scene_1a94a9eb92a56862835c7efcc00db2d0c7" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onDisplayChanged</name></member>
      <member refid="class_r_d_e_1_1_scene_1a934540e9d0ea6ef49d4bd9a359421a63" prot="public" virt="virtual"><scope>RDE::Scene</scope><name>onEnd</name></member>
      <member refid="class_r_d_e_1_1_scene_1aa9af7f58691de79d8f6f01da410779c2" prot="public" virt="virtual"><scope>RDE::Scene</scope><name>onEvent</name></member>
      <member refid="class_r_d_e_1_1_scene_1aae3f084bca9e26bdd4a2849c126bb16f" prot="public" virt="virtual"><scope>RDE::Scene</scope><name>onFixedUpdate</name></member>
      <member refid="class_r_d_e_1_1_scene_1adcae6a87d1b027af90064c68aa218edd" prot="public" virt="virtual"><scope>RDE::Scene</scope><name>onImGuiRender</name></member>
      <member refid="class_r_d_e_1_1_scene_1a5f93bed54b22e5834a352892e3350f1e" prot="public" virt="virtual"><scope>RDE::Scene</scope><name>onInit</name></member>
      <member refid="class_r_d_e_1_1_scene_1a50fa39ffbc9efd9b2df0ef255b7bb689" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerDebugRender</name></member>
      <member refid="class_r_d_e_1_1_scene_1a870645360c04836cd0b8b92675498a4e" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerDebugRenderHierarchy</name></member>
      <member refid="class_r_d_e_1_1_scene_1a2e87ac52be939606583149b2b5952d05" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerDebugRenderUI</name></member>
      <member refid="class_r_d_e_1_1_scene_1a3dcf9b2f790f80884c7cf124667f4774" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerEvent</name></member>
      <member refid="class_r_d_e_1_1_scene_1a7aa68d1910d7f396a41efa82aaa3a0a7" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerEventHierarchy</name></member>
      <member refid="class_r_d_e_1_1_scene_1a98f7e95734c85ee6eaf6a81ca0d6f1ef" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerEventUI</name></member>
      <member refid="class_r_d_e_1_1_scene_1ac9eb043f50a90e6619a179f6f1a1f1bb" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerFixedUpdate</name></member>
      <member refid="class_r_d_e_1_1_scene_1a8345888e1c95f4686cee78d06d649a02" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerFixedUpdateHierarchy</name></member>
      <member refid="class_r_d_e_1_1_scene_1a2bd1519a85c3b2b2a9dc6a63dabaab4e" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerFixedUpdateUI</name></member>
      <member refid="class_r_d_e_1_1_scene_1a7cc78eed9a314f027d68eb1d9e94e809" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerLateUpdate</name></member>
      <member refid="class_r_d_e_1_1_scene_1a5cda270df9a9e7e293f9bdf64946b095" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerLateUpdateHierarchy</name></member>
      <member refid="class_r_d_e_1_1_scene_1abe2cf4be993b75fbddb46d083d2c9402" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerLateUpdateUI</name></member>
      <member refid="class_r_d_e_1_1_scene_1a3090da5c4f6bb02a1e4200b77434628b" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerRender</name></member>
      <member refid="class_r_d_e_1_1_scene_1a491d38fc9d02d3d8b4a3476a570bf051" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerRenderHierarchy</name></member>
      <member refid="class_r_d_e_1_1_scene_1ac61128ab369624f53d0ff7d6ccd4659f" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerRenderUI</name></member>
      <member refid="class_r_d_e_1_1_scene_1aeeee37aeedfb3a43a0d2c0f46761b4dc" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerUpdate</name></member>
      <member refid="class_r_d_e_1_1_scene_1a6e9dcde9a7267050f1f41482615de41b" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerUpdateHierarchy</name></member>
      <member refid="class_r_d_e_1_1_scene_1a32c2d49169153e07110661b275e2b191" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>onInnerUpdateUI</name></member>
      <member refid="class_r_d_e_1_1_scene_1a46c3ec5f961753bce8c33e0188a243ab" prot="public" virt="virtual"><scope>RDE::Scene</scope><name>onLateUpdate</name></member>
      <member refid="class_r_d_e_1_1_scene_1a538c7f27e8686c6265770cce4b2016f4" prot="public" virt="virtual"><scope>RDE::Scene</scope><name>onUpdate</name></member>
      <member refid="class_r_d_e_1_1_scene_1a69163257e3ae1fb02a882e5d4cdf9796" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>postRenderSync</name></member>
      <member refid="class_r_d_e_1_1_scene_1ace97848a19bd8364af76370e39b30c8b" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>postRenderSyncUI</name></member>
      <member refid="class_r_d_e_1_1_scene_1a43da5e07cfaef8025777f52fc537da13" prot="private" virt="non-virtual"><scope>RDE::Scene</scope><name>prefabs</name></member>
      <member refid="class_r_d_e_1_1_scene_1a1abad6512acb752b7ae00831bfd4b3f6" prot="public" virt="virtual"><scope>RDE::Scene</scope><name>preInit</name></member>
      <member refid="class_r_d_e_1_1_scene_1a2d4b686078ec833fd4170aca973e0a5b" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>recalculateRenderizableTree</name></member>
      <member refid="class_r_d_e_1_1_scene_1a09afbcd53b605f67a9475c467ccca966" prot="protected" virt="non-virtual"><scope>RDE::Scene</scope><name>recalculateRenderizableTreeUI</name></member>
      <member refid="class_r_d_e_1_1_scene_1a9bce14fb3192f8cb5a206ff12dd8d4e1" prot="public" virt="non-virtual"><scope>RDE::Scene</scope><name>removeCamera</name></member>
      <member refid="class_r_d_e_1_1_scene_1a7481e65138731d137bf590765b30b4ba" prot="public" virt="non-virtual"><scope>RDE::Scene</scope><name>Scene</name></member>
      <member refid="class_r_d_e_1_1_scene_1a284464b0561a6f2915f04b0245b987f0" prot="private" virt="non-virtual"><scope>RDE::Scene</scope><name>SceneManager</name></member>
      <member refid="class_r_d_e_1_1_scene_1a1cc41c6cc031495a6e618d4f02a03c94" prot="public" virt="non-virtual"><scope>RDE::Scene</scope><name>switchMainCamera</name></member>
      <member refid="class_r_d_e_1_1_scene_1a066553f781c5bd3fb982cbf04e7c1335" prot="private" virt="non-virtual"><scope>RDE::Scene</scope><name>WindowInput</name></member>
      <member refid="class_r_d_e_1_1_scene_1a23589dc2561bead6d74ab9ca96fbee62" prot="public" virt="virtual"><scope>RDE::Scene</scope><name>~Scene</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
