<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="class_r_d_e_1_1_shader" kind="class" language="C++" prot="public">
    <compoundname>RDE::Shader</compoundname>
    <includes refid="_shader_8h" local="no">Shader.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_r_d_e_1_1_shader_1adb3b922d654c5a81437d6697ccc3a3cf" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; GLuint, GLuint &gt;</type>
        <definition>std::unordered_map&lt;GLuint, GLuint&gt; RDE::Shader::shadersAttached</definition>
        <argsstring></argsstring>
        <name>shadersAttached</name>
        <qualifiedname>RDE::Shader::shadersAttached</qualifiedname>
        <briefdescription>
<para>Map with the loaded shaders, as default only Vertex and Fragment shaders. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="110" column="32" bodyfile="engine/include/core/render/elements/Shader.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_shader_1a47c52684ea86e8f6a11f5af5460c7419" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; const char *, GLint &gt;</type>
        <definition>std::unordered_map&lt;const char*, GLint&gt; RDE::Shader::uniforms</definition>
        <argsstring></argsstring>
        <name>uniforms</name>
        <qualifiedname>RDE::Shader::uniforms</qualifiedname>
        <briefdescription>
<para>Map joining the name of a uniform and its location on the shader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="115" column="20" bodyfile="engine/include/core/render/elements/Shader.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_shader_1a365432f429b27b41f3ebe8230635e58e" prot="private" static="no" mutable="no">
        <type>GLuint</type>
        <definition>GLuint RDE::Shader::shaderID</definition>
        <argsstring></argsstring>
        <name>shaderID</name>
        <qualifiedname>RDE::Shader::shaderID</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
<para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> ID in the GPU so the engine can locate it and enable it to render. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="120" column="20" bodyfile="engine/include/core/render/elements/Shader.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_shader_1a6c31aa7c810b9f3fcb6a711cd56393eb" prot="private" static="no" mutable="no">
        <type>GLuint</type>
        <definition>GLuint RDE::Shader::vao</definition>
        <argsstring></argsstring>
        <name>vao</name>
        <qualifiedname>RDE::Shader::vao</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
<para>VAO of the shader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="125" column="20" bodyfile="engine/include/core/render/elements/Shader.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_shader_1aa922c5a593488b1019e2ad322f52b264" prot="private" static="no" mutable="no">
        <type>GLuint</type>
        <definition>GLuint RDE::Shader::staticVao</definition>
        <argsstring></argsstring>
        <name>staticVao</name>
        <qualifiedname>RDE::Shader::staticVao</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="125" column="25" bodyfile="engine/include/core/render/elements/Shader.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_shader_1a4f086f582ededab6ba3d54a826b6f087" prot="private" static="no" mutable="no">
        <type>GLuint</type>
        <definition>GLuint RDE::Shader::ibo</definition>
        <argsstring></argsstring>
        <name>ibo</name>
        <qualifiedname>RDE::Shader::ibo</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
<para>IBO of the shader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="130" column="20" bodyfile="engine/include/core/render/elements/Shader.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_shader_1ad320609dfc4495c98b1c68b516893820" prot="private" static="no" mutable="no">
        <type>GLuint</type>
        <definition>GLuint RDE::Shader::staticIbo</definition>
        <argsstring></argsstring>
        <name>staticIbo</name>
        <qualifiedname>RDE::Shader::staticIbo</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="130" column="25" bodyfile="engine/include/core/render/elements/Shader.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_shader_1a7acc7b9656b567fe4350b48889a013ba" prot="private" static="no" mutable="no">
        <type>GLuint</type>
        <definition>GLuint RDE::Shader::vbo</definition>
        <argsstring></argsstring>
        <name>vbo</name>
        <qualifiedname>RDE::Shader::vbo</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
<para>VBO of the shader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="135" column="20" bodyfile="engine/include/core/render/elements/Shader.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_shader_1a98be4e4606c14539e0270efad5582aea" prot="private" static="no" mutable="no">
        <type>GLuint</type>
        <definition>GLuint RDE::Shader::staticVbo</definition>
        <argsstring></argsstring>
        <name>staticVbo</name>
        <qualifiedname>RDE::Shader::staticVbo</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="135" column="25" bodyfile="engine/include/core/render/elements/Shader.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_shader_1ace9672c9cc7188a8a151b4e11129b791" prot="private" static="no" mutable="no">
        <type>long</type>
        <definition>long RDE::Shader::vertexDataSize</definition>
        <argsstring></argsstring>
        <name>vertexDataSize</name>
        <qualifiedname>RDE::Shader::vertexDataSize</qualifiedname>
        <briefdescription>
<para>Size of VertexData in bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="140" column="19" bodyfile="engine/include/core/render/elements/Shader.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1a4253319acf7f7b62e87c5793368535dc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Shader::loadVertexConfigSpecific</definition>
        <argsstring>(const std::vector&lt; VertexConfig &gt; &amp;_verticesConfig, const std::vector&lt; const char * &gt; _uniforms, int _maxIndicesPerDrawCall, GLenum _drawType, GLuint &amp;_vbo, GLuint &amp;_ibo, GLuint &amp;_vao)</argsstring>
        <name>loadVertexConfigSpecific</name>
        <qualifiedname>RDE::Shader::loadVertexConfigSpecific</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="struct_r_d_e_1_1_vertex_config" kindref="compound">VertexConfig</ref> &gt; &amp;</type>
          <declname>_verticesConfig</declname>
        </param>
        <param>
          <type>const std::vector&lt; const char * &gt;</type>
          <declname>_uniforms</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_maxIndicesPerDrawCall</declname>
        </param>
        <param>
          <type>GLenum</type>
          <declname>_drawType</declname>
        </param>
        <param>
          <type>GLuint &amp;</type>
          <declname>_vbo</declname>
        </param>
        <param>
          <type>GLuint &amp;</type>
          <declname>_ibo</declname>
        </param>
        <param>
          <type>GLuint &amp;</type>
          <declname>_vao</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="143" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1ae15f04383f74f06e6c874b0d69d8fb8d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RDE::Shader::initFromString</definition>
        <argsstring>(const std::string &amp;_shaderCode, GLenum _shaderType)</argsstring>
        <name>initFromString</name>
        <qualifiedname>RDE::Shader::initFromString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>_shaderCode</declname>
        </param>
        <param>
          <type>GLenum</type>
          <declname>_shaderType</declname>
        </param>
        <briefdescription>
<para>Compiles the <ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> code and sends it to the GPU. Returns true if compilation is successful. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_shaderCode</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertex or Fragment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_shaderType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of shader, Vertex or Fragment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="250" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1a61515c8b6cb5787d6d085db5536c28f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RDE::Shader::Shader</definition>
        <argsstring>()</argsstring>
        <name>Shader</name>
        <qualifiedname>RDE::Shader::Shader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="146" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1a24e172a2b494e30864f1ede3d955d5d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RDE::Shader::~Shader</definition>
        <argsstring>()</argsstring>
        <name>~Shader</name>
        <qualifiedname>RDE::Shader::~Shader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="147" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1ada40e73ca060a0d38e618f536e32a6f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint RDE::Shader::loadFromFiles</definition>
        <argsstring>(const std::string &amp;_vertex, const std::string &amp;_fragment, FileManager *_fileManager)</argsstring>
        <name>loadFromFiles</name>
        <qualifiedname>RDE::Shader::loadFromFiles</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>_vertex</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_fragment</declname>
        </param>
        <param>
          <type><ref refid="class_r_d_e_1_1_file_manager" kindref="compound">FileManager</ref> *</type>
          <declname>_fileManager</declname>
        </param>
        <briefdescription>
<para>Loads a <ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> from a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertex <ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_fragment</parametername>
</parameternamelist>
<parameterdescription>
<para>Fragment <ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ID of the <ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> on the GPU </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="155" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1a992a722745eddbf893a6f83c67029828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint RDE::Shader::loadFromStrings</definition>
        <argsstring>(const std::string &amp;_vertex, const std::string &amp;_fragment)</argsstring>
        <name>loadFromStrings</name>
        <qualifiedname>RDE::Shader::loadFromStrings</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>_vertex</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_fragment</declname>
        </param>
        <briefdescription>
<para>Loads a <ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> from a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertex <ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_fragment</parametername>
</parameternamelist>
<parameterdescription>
<para>Fragment <ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ID of the <ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> on the GPU </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="163" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1a8285f69e8d673b6088e09ae46d6ce0bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Shader::loadVertexConfig</definition>
        <argsstring>(const std::vector&lt; VertexConfig &gt; &amp;_verticesConfig, const std::vector&lt; const char * &gt; _uniforms, int _maxIndicesPerDrawCall)</argsstring>
        <name>loadVertexConfig</name>
        <qualifiedname>RDE::Shader::loadVertexConfig</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="struct_r_d_e_1_1_vertex_config" kindref="compound">VertexConfig</ref> &gt; &amp;</type>
          <declname>_verticesConfig</declname>
        </param>
        <param>
          <type>const std::vector&lt; const char * &gt;</type>
          <declname>_uniforms</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_maxIndicesPerDrawCall</declname>
        </param>
        <briefdescription>
<para>Loads the data structure that is going to be sent to the GPU. This method MUST be called. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="168" column="6"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1a1aff2d31e9ce64100f8ba0ac0afc060d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint RDE::Shader::getShaderID</definition>
        <argsstring>() const</argsstring>
        <name>getShaderID</name>
        <qualifiedname>RDE::Shader::getShaderID</qualifiedname>
        <briefdescription>
<para>Returns the ID of the <ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> on the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="174" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1af20661a9f8ff098226b0f5997b8a1c6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint RDE::Shader::getDynamicShaderVAO</definition>
        <argsstring>() const</argsstring>
        <name>getDynamicShaderVAO</name>
        <qualifiedname>RDE::Shader::getDynamicShaderVAO</qualifiedname>
        <briefdescription>
<para>Returns the ID of the dynamic drawing VAO on the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="180" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1a9d78918ccc8c0015dc8f618c9ed224c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint RDE::Shader::getDynamicShaderIBO</definition>
        <argsstring>() const</argsstring>
        <name>getDynamicShaderIBO</name>
        <qualifiedname>RDE::Shader::getDynamicShaderIBO</qualifiedname>
        <briefdescription>
<para>Returns the ID of the dynamic drawing IBO on the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="186" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1a22fe772aa067a6ae77100408924f1e3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint RDE::Shader::getDynamicShaderVBO</definition>
        <argsstring>() const</argsstring>
        <name>getDynamicShaderVBO</name>
        <qualifiedname>RDE::Shader::getDynamicShaderVBO</qualifiedname>
        <briefdescription>
<para>Returns the ID of the dynamic drawing VBO on the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="192" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1a6a725effeb4ef64ea3ab242c1a53f2c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint RDE::Shader::getStaticShaderVAO</definition>
        <argsstring>() const</argsstring>
        <name>getStaticShaderVAO</name>
        <qualifiedname>RDE::Shader::getStaticShaderVAO</qualifiedname>
        <briefdescription>
<para>Returns the ID of the static drawing VAO on the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="198" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1a5a209b937e761100692b38b94afe810e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint RDE::Shader::getStaticShaderIBO</definition>
        <argsstring>() const</argsstring>
        <name>getStaticShaderIBO</name>
        <qualifiedname>RDE::Shader::getStaticShaderIBO</qualifiedname>
        <briefdescription>
<para>Returns the ID of the static drawing IBO on the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="204" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1a60bd56ad8dbbeeec25d5feb7b7687850" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint RDE::Shader::getStaticShaderVBO</definition>
        <argsstring>() const</argsstring>
        <name>getStaticShaderVBO</name>
        <qualifiedname>RDE::Shader::getStaticShaderVBO</qualifiedname>
        <briefdescription>
<para>Returns the ID of the static drawing VBO on the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="210" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1a536ee9675f4277e1e71c3eb6e16c1ecc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long RDE::Shader::getShaderVertexDataSize</definition>
        <argsstring>() const</argsstring>
        <name>getShaderVertexDataSize</name>
        <qualifiedname>RDE::Shader::getShaderVertexDataSize</qualifiedname>
        <briefdescription>
<para>Returns the size of the VertexData structure in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>long </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="217" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1a6b70d75548334c0a686e5bc97f3e2684" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Shader::setUniformValueFloat</definition>
        <argsstring>(const char *_uniformName, RDE_UNIFORM_FV _type, GLfloat *_data, GLboolean _transpose=GL_FALSE)</argsstring>
        <name>setUniformValueFloat</name>
        <qualifiedname>RDE::Shader::setUniformValueFloat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>_uniformName</declname>
        </param>
        <param>
          <type><ref refid="namespace_r_d_e_1a95da56214350f01c5f94f8e37195cc6d" kindref="member">RDE_UNIFORM_FV</ref></type>
          <declname>_type</declname>
        </param>
        <param>
          <type>GLfloat *</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>GLboolean</type>
          <declname>_transpose</declname>
          <defval>GL_FALSE</defval>
        </param>
        <briefdescription>
<para>Sets the value of an existing uniform. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_uniformName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the uniform in the shader </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of uniform we are setting, check RDE_UNIFORM_FV enum options </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The actual data to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="225" column="6"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1acfd68c78402a4ea830cf1d821178b982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Shader::setUniformValueInt</definition>
        <argsstring>(const char *_uniformName, RDE_UNIFORM_IV _type, GLint *_data)</argsstring>
        <name>setUniformValueInt</name>
        <qualifiedname>RDE::Shader::setUniformValueInt</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>_uniformName</declname>
        </param>
        <param>
          <type><ref refid="namespace_r_d_e_1aa442da21122dddd6a8856e0bfc24c86e" kindref="member">RDE_UNIFORM_IV</ref></type>
          <declname>_type</declname>
        </param>
        <param>
          <type>GLint *</type>
          <declname>_data</declname>
        </param>
        <briefdescription>
<para>Sets the value of an existing uniform. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_uniformName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the uniform in the shader </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of uniform we are setting, check RDE_UNIFORM_IV enum options </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The actual data to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="233" column="6"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_1a562eaae722942a4d315bc7297693bda7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Shader::setUniformValueUInt</definition>
        <argsstring>(const char *_uniformName, RDE_UNIFORM_UIV _type, GLuint *_data)</argsstring>
        <name>setUniformValueUInt</name>
        <qualifiedname>RDE::Shader::setUniformValueUInt</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>_uniformName</declname>
        </param>
        <param>
          <type><ref refid="namespace_r_d_e_1a5eba8c0bb1379fa821c063ddade77d8d" kindref="member">RDE_UNIFORM_UIV</ref></type>
          <declname>_type</declname>
        </param>
        <param>
          <type>GLuint *</type>
          <declname>_data</declname>
        </param>
        <briefdescription>
<para>Sets the value of an existing uniform. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_uniformName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the uniform in the shader </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of uniform we are setting, check RDE_UNIFORM_UIV enum options </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The actual data to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/Shader.h" line="241" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class represents the <ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> program compiled and stored in the GPU. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="engine/include/core/render/elements/Shader.h" line="104" column="5" bodyfile="engine/include/core/render/elements/Shader.h" bodystart="104" bodyend="251"/>
    <listofallmembers>
      <member refid="class_r_d_e_1_1_shader_1a9d78918ccc8c0015dc8f618c9ed224c2" prot="public" virt="non-virtual"><scope>RDE::Shader</scope><name>getDynamicShaderIBO</name></member>
      <member refid="class_r_d_e_1_1_shader_1af20661a9f8ff098226b0f5997b8a1c6c" prot="public" virt="non-virtual"><scope>RDE::Shader</scope><name>getDynamicShaderVAO</name></member>
      <member refid="class_r_d_e_1_1_shader_1a22fe772aa067a6ae77100408924f1e3e" prot="public" virt="non-virtual"><scope>RDE::Shader</scope><name>getDynamicShaderVBO</name></member>
      <member refid="class_r_d_e_1_1_shader_1a1aff2d31e9ce64100f8ba0ac0afc060d" prot="public" virt="non-virtual"><scope>RDE::Shader</scope><name>getShaderID</name></member>
      <member refid="class_r_d_e_1_1_shader_1a536ee9675f4277e1e71c3eb6e16c1ecc" prot="public" virt="non-virtual"><scope>RDE::Shader</scope><name>getShaderVertexDataSize</name></member>
      <member refid="class_r_d_e_1_1_shader_1a5a209b937e761100692b38b94afe810e" prot="public" virt="non-virtual"><scope>RDE::Shader</scope><name>getStaticShaderIBO</name></member>
      <member refid="class_r_d_e_1_1_shader_1a6a725effeb4ef64ea3ab242c1a53f2c0" prot="public" virt="non-virtual"><scope>RDE::Shader</scope><name>getStaticShaderVAO</name></member>
      <member refid="class_r_d_e_1_1_shader_1a60bd56ad8dbbeeec25d5feb7b7687850" prot="public" virt="non-virtual"><scope>RDE::Shader</scope><name>getStaticShaderVBO</name></member>
      <member refid="class_r_d_e_1_1_shader_1a4f086f582ededab6ba3d54a826b6f087" prot="private" virt="non-virtual"><scope>RDE::Shader</scope><name>ibo</name></member>
      <member refid="class_r_d_e_1_1_shader_1ae15f04383f74f06e6c874b0d69d8fb8d" prot="private" virt="non-virtual"><scope>RDE::Shader</scope><name>initFromString</name></member>
      <member refid="class_r_d_e_1_1_shader_1ada40e73ca060a0d38e618f536e32a6f1" prot="public" virt="non-virtual"><scope>RDE::Shader</scope><name>loadFromFiles</name></member>
      <member refid="class_r_d_e_1_1_shader_1a992a722745eddbf893a6f83c67029828" prot="public" virt="non-virtual"><scope>RDE::Shader</scope><name>loadFromStrings</name></member>
      <member refid="class_r_d_e_1_1_shader_1a8285f69e8d673b6088e09ae46d6ce0bd" prot="public" virt="non-virtual"><scope>RDE::Shader</scope><name>loadVertexConfig</name></member>
      <member refid="class_r_d_e_1_1_shader_1a4253319acf7f7b62e87c5793368535dc" prot="private" virt="non-virtual"><scope>RDE::Shader</scope><name>loadVertexConfigSpecific</name></member>
      <member refid="class_r_d_e_1_1_shader_1a6b70d75548334c0a686e5bc97f3e2684" prot="public" virt="non-virtual"><scope>RDE::Shader</scope><name>setUniformValueFloat</name></member>
      <member refid="class_r_d_e_1_1_shader_1acfd68c78402a4ea830cf1d821178b982" prot="public" virt="non-virtual"><scope>RDE::Shader</scope><name>setUniformValueInt</name></member>
      <member refid="class_r_d_e_1_1_shader_1a562eaae722942a4d315bc7297693bda7" prot="public" virt="non-virtual"><scope>RDE::Shader</scope><name>setUniformValueUInt</name></member>
      <member refid="class_r_d_e_1_1_shader_1a61515c8b6cb5787d6d085db5536c28f2" prot="public" virt="non-virtual"><scope>RDE::Shader</scope><name>Shader</name></member>
      <member refid="class_r_d_e_1_1_shader_1a365432f429b27b41f3ebe8230635e58e" prot="private" virt="non-virtual"><scope>RDE::Shader</scope><name>shaderID</name></member>
      <member refid="class_r_d_e_1_1_shader_1adb3b922d654c5a81437d6697ccc3a3cf" prot="private" virt="non-virtual"><scope>RDE::Shader</scope><name>shadersAttached</name></member>
      <member refid="class_r_d_e_1_1_shader_1ad320609dfc4495c98b1c68b516893820" prot="private" virt="non-virtual"><scope>RDE::Shader</scope><name>staticIbo</name></member>
      <member refid="class_r_d_e_1_1_shader_1aa922c5a593488b1019e2ad322f52b264" prot="private" virt="non-virtual"><scope>RDE::Shader</scope><name>staticVao</name></member>
      <member refid="class_r_d_e_1_1_shader_1a98be4e4606c14539e0270efad5582aea" prot="private" virt="non-virtual"><scope>RDE::Shader</scope><name>staticVbo</name></member>
      <member refid="class_r_d_e_1_1_shader_1a47c52684ea86e8f6a11f5af5460c7419" prot="private" virt="non-virtual"><scope>RDE::Shader</scope><name>uniforms</name></member>
      <member refid="class_r_d_e_1_1_shader_1a6c31aa7c810b9f3fcb6a711cd56393eb" prot="private" virt="non-virtual"><scope>RDE::Shader</scope><name>vao</name></member>
      <member refid="class_r_d_e_1_1_shader_1a7acc7b9656b567fe4350b48889a013ba" prot="private" virt="non-virtual"><scope>RDE::Shader</scope><name>vbo</name></member>
      <member refid="class_r_d_e_1_1_shader_1ace9672c9cc7188a8a151b4e11129b791" prot="private" virt="non-virtual"><scope>RDE::Shader</scope><name>vertexDataSize</name></member>
      <member refid="class_r_d_e_1_1_shader_1a24e172a2b494e30864f1ede3d955d5d9" prot="public" virt="non-virtual"><scope>RDE::Shader</scope><name>~Shader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
