<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="class_r_d_e_1_1_graph" kind="class" language="C++" prot="public">
    <compoundname>RDE::Graph</compoundname>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_r_d_e_1_1_graph_1af851b4d9aacd1a871da33592334b8d72" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Transform</definition>
        <argsstring></argsstring>
        <name>Transform</name>
        <qualifiedname>RDE::Graph::Transform</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_transform" kindref="compound">Transform</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="64" column="22" bodyfile="engine/include/core/graph/Graph.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_r_d_e_1_1_graph_1a3dfc9521caba3d2bee092686f7d487ee" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class UITransform</definition>
        <argsstring></argsstring>
        <name>UITransform</name>
        <qualifiedname>RDE::Graph::UITransform</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_u_i_transform" kindref="compound">UITransform</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="65" column="22" bodyfile="engine/include/core/graph/Graph.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_r_d_e_1_1_graph_1a032858ae1fe02d2d1170981c2af2d67c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Scene</definition>
        <argsstring></argsstring>
        <name>Scene</name>
        <qualifiedname>RDE::Graph::Scene</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_scene" kindref="compound">Scene</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="66" column="22" bodyfile="engine/include/core/graph/Graph.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_r_d_e_1_1_graph_1a9816083e25bae0b2f472e19382136687" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Canvas</definition>
        <argsstring></argsstring>
        <name>Canvas</name>
        <qualifiedname>RDE::Graph::Canvas</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_canvas" kindref="compound">Canvas</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="67" column="22" bodyfile="engine/include/core/graph/Graph.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_r_d_e_1_1_graph_1a6db9d28bd448a131448276ee03de1e6d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Node</definition>
        <argsstring></argsstring>
        <name>Node</name>
        <qualifiedname>RDE::Graph::Node</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="68" column="22" bodyfile="engine/include/core/graph/Graph.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_r_d_e_1_1_graph_1af4f241a517f779b649085b1b171a83b1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class ImGuiScene</definition>
        <argsstring></argsstring>
        <name>ImGuiScene</name>
        <qualifiedname>RDE::Graph::ImGuiScene</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_im_gui_scene" kindref="compound">ImGuiScene</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="69" column="22" bodyfile="engine/include/core/graph/Graph.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_r_d_e_1_1_graph_1aed8714396345e5fc5b1a2bf7ccaed500" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class ConfigManager</definition>
        <argsstring></argsstring>
        <name>ConfigManager</name>
        <qualifiedname>RDE::Graph::ConfigManager</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_config_manager" kindref="compound">ConfigManager</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="70" column="22" bodyfile="engine/include/core/graph/Graph.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_r_d_e_1_1_graph_1a64d889a8831a97b28ee0ba11f65ee06d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class RenderizableInnerData</definition>
        <argsstring></argsstring>
        <name>RenderizableInnerData</name>
        <qualifiedname>RDE::Graph::RenderizableInnerData</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_renderizable_inner_data" kindref="compound">RenderizableInnerData</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="71" column="22" bodyfile="engine/include/core/graph/Graph.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_r_d_e_1_1_graph_1a5aa78d6fceaf03380cf2b71d0a8e370c" prot="private" static="no" mutable="no">
        <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node* RDE::Graph::sceneRoot</definition>
        <argsstring></argsstring>
        <name>sceneRoot</name>
        <qualifiedname>RDE::Graph::sceneRoot</qualifiedname>
        <briefdescription>
<para><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> that is the root of the scene. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="77" column="18" bodyfile="engine/include/core/graph/Graph.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_graph_1affa925bb95f3fd4fb12ff932808470f4" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string RDE::Graph::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <qualifiedname>RDE::Graph::name</qualifiedname>
        <briefdescription>
<para>Name of the root of the scene. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="82" column="25" bodyfile="engine/include/core/graph/Graph.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_graph_1a58eab1c87a70c7b1e8a9c05d16a37672" prot="private" static="no" mutable="no">
        <type>NodeContainer</type>
        <definition>NodeContainer RDE::Graph::registry</definition>
        <argsstring></argsstring>
        <name>registry</name>
        <qualifiedname>RDE::Graph::registry</qualifiedname>
        <briefdescription>
<para>EnTT entities container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="87" column="27" bodyfile="engine/include/core/graph/Graph.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_graph_1ab417c5e29ffa9be012c74d23ff4a76fd" prot="private" static="no" mutable="no">
        <type><ref refid="class_r_d_e_1_1_scene" kindref="compound">Scene</ref> *</type>
        <definition>Scene* RDE::Graph::scene</definition>
        <argsstring></argsstring>
        <name>scene</name>
        <qualifiedname>RDE::Graph::scene</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para><ref refid="class_r_d_e_1_1_scene" kindref="compound">Scene</ref> that this graph is attached to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="92" column="19" bodyfile="engine/include/core/graph/Graph.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_graph_1af3f842217ba2bb2c5cc6c9e39772962f" prot="private" static="no" mutable="no">
        <type><ref refid="struct_r_d_e_1_1_unique_delegate" kindref="compound">UniqueDelegate</ref>&lt; void(void *)&gt;</type>
        <definition>UniqueDelegate&lt;void(void*)&gt; RDE::Graph::onDataChanged</definition>
        <argsstring></argsstring>
        <name>onDataChanged</name>
        <qualifiedname>RDE::Graph::onDataChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="94" column="28" bodyfile="engine/include/core/graph/Graph.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_graph_1ac8855f7d22395763f7985d6a6db903c6" prot="private" static="no" mutable="no">
        <type><ref refid="struct_r_d_e_1_1_rendering_tree_data" kindref="compound">RenderingTreeData</ref></type>
        <definition>RenderingTreeData RDE::Graph::renderingTreeData</definition>
        <argsstring></argsstring>
        <name>renderingTreeData</name>
        <qualifiedname>RDE::Graph::renderingTreeData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="96" column="31" bodyfile="engine/include/core/graph/Graph.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_r_d_e_1_1_graph_1a7e2bee71b188f22349b33814e7894b37" prot="public" static="no" mutable="no">
        <type><ref refid="struct_r_d_e_1_1_unique_delegate" kindref="compound">UniqueDelegate</ref>&lt; void(NodeContainer &amp;, <ref refid="class_r_d_e_1_1_event" kindref="compound">Event</ref> &amp;)&gt;</type>
        <definition>UniqueDelegate&lt;void(NodeContainer&amp;, Event&amp;)&gt; RDE::Graph::onEventDel</definition>
        <argsstring></argsstring>
        <name>onEventDel</name>
        <qualifiedname>RDE::Graph::onEventDel</qualifiedname>
        <briefdescription>
<para>A callback if we want our graph to make any specific task during its internal event polling. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="117" column="28" bodyfile="engine/include/core/graph/Graph.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1a5c7089e35014cf9a7744c4d944b148df" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Graph::printScene</definition>
        <argsstring>(Node *_node, std::ostream &amp;_os, int &amp;_indent)</argsstring>
        <name>printScene</name>
        <qualifiedname>RDE::Graph::printScene</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>_node</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>_os</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>_indent</declname>
        </param>
        <briefdescription>
<para>Prints the hierarchy tree on the console. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_os</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_indent</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="104" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1a702459c990a49f7ed0d74d4cfbc3fdf5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Graph::removeNodeInner</definition>
        <argsstring>(Node *_node, bool _delete=true)</argsstring>
        <name>removeNodeInner</name>
        <qualifiedname>RDE::Graph::removeNodeInner</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>_delete</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Removes a node all of its components and also can destroy it from the scene. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_node</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> to remove components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_delete</parametername>
</parameternamelist>
<parameterdescription>
<para>If also has to be destroyed from the scene </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="111" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1a876662b4b92fcde196253a923f9359b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RDE::Graph::Graph</definition>
        <argsstring>(Scene *_scene, const std::string &amp;_sceneName, bool _isUI=false)</argsstring>
        <name>Graph</name>
        <qualifiedname>RDE::Graph::Graph</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_scene" kindref="compound">Scene</ref> *</type>
          <declname>_scene</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_sceneName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>_isUI</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="120" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1a925a5d52f50e667f4a000cc145e45ccd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>RDE::Graph::~Graph</definition>
        <argsstring>()</argsstring>
        <name>~Graph</name>
        <qualifiedname>RDE::Graph::~Graph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="121" column="13" bodyfile="engine/include/core/graph/Graph.h" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1a295b232ac336712a22e9957de67eb074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node * RDE::Graph::createNode</definition>
        <argsstring>(const std::string &amp;_tag=&quot;&quot;, Node *_parent=nullptr)</argsstring>
        <name>createNode</name>
        <qualifiedname>RDE::Graph::createNode</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>_tag</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>_parent</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function creates and adds a new <ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> to the world. It is really recommended to add a tag value, as there is a way to retrieve a <ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> by it&apos;s tag name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the name to reference if the ID is not provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_parent</parametername>
</parameternamelist>
<parameterdescription>
<para>the NodeID of the <ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> we want to be the parent of the creating <ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="128" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1a91732f6740e242affffdf86bfd093733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node * RDE::Graph::instantiatePrefab</definition>
        <argsstring>(Node *_prefab, const Vec2F &amp;_position, Node *_parent=nullptr)</argsstring>
        <name>instantiatePrefab</name>
        <qualifiedname>RDE::Graph::instantiatePrefab</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>_prefab</declname>
        </param>
        <param>
          <type>const <ref refid="struct_r_d_e_1_1_vec2" kindref="compound">Vec2F</ref> &amp;</type>
          <declname>_position</declname>
        </param>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>_parent</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Creates an independent copy of a loaded prefab. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_prefab</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefab NodeID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NodeID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="135" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1a47cc4f110838ba04f1c89e79bad204ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Graph::removeNode</definition>
        <argsstring>(Node *_node)</argsstring>
        <name>removeNode</name>
        <qualifiedname>RDE::Graph::removeNode</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>_node</declname>
        </param>
        <briefdescription>
<para>Removes a node and all of it&apos;s children. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_node</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the node to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="141" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1a2b699efbe8cf0359f60601c38b3dca7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Graph::removeNode</definition>
        <argsstring>(const std::string &amp;_nodeTagName)</argsstring>
        <name>removeNode</name>
        <qualifiedname>RDE::Graph::removeNode</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>_nodeTagName</declname>
        </param>
        <briefdescription>
<para>Removes a node and all of it&apos;s children. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_nodeTagName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the node to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="147" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1a593a3ffb242b39d742e850b74985309a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Graph::orphan</definition>
        <argsstring>(Node *_node)</argsstring>
        <name>orphan</name>
        <qualifiedname>RDE::Graph::orphan</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>_node</declname>
        </param>
        <briefdescription>
<para>Makes the <ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> to loose it&apos;s parent and to be reassigned to the root <ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_node</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the node to orphan </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="153" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1abf92b9bd9ee1139ef1fcc9b1415a9db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Graph::orphan</definition>
        <argsstring>(const std::string &amp;_nodeTagName)</argsstring>
        <name>orphan</name>
        <qualifiedname>RDE::Graph::orphan</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>_nodeTagName</declname>
        </param>
        <briefdescription>
<para>Makes the <ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> to loose it&apos;s parent and to be reassigned to the root <ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_nodeTagName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the node to orphan </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="159" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1aa367f552cb81053588e04179773c8592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node * RDE::Graph::getNode</definition>
        <argsstring>(const std::string &amp;_tagName)</argsstring>
        <name>getNode</name>
        <qualifiedname>RDE::Graph::getNode</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>_tagName</declname>
        </param>
        <briefdescription>
<para>Returns the Node* by it&apos;s tag name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_tagName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Node* </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="166" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1ac58aab90bbcb9058d488a2cdcab0c616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node * RDE::Graph::getNode</definition>
        <argsstring>(const NodeID &amp;_nodeID)</argsstring>
        <name>getNode</name>
        <qualifiedname>RDE::Graph::getNode</qualifiedname>
        <param>
          <type>const <ref refid="namespace_r_d_e_1a9feedbb7b8355f0ee9c64cfaa2a474d1" kindref="member">NodeID</ref> &amp;</type>
          <declname>_nodeID</declname>
        </param>
        <briefdescription>
<para>Returns the Node* by it&apos;s NodeID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_nodeID</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Node* </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="173" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1aed0df137164763b602fdafbf01615de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Graph::setParent</definition>
        <argsstring>(Node *_node, Node *_parent)</argsstring>
        <name>setParent</name>
        <qualifiedname>RDE::Graph::setParent</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>_node</declname>
        </param>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>_parent</declname>
        </param>
        <briefdescription>
<para>Changes the parent of the <ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> to another one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_node</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the child </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the parent </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="180" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1aa7a328baedb2d8369cde0c870d322339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string RDE::Graph::toString</definition>
        <argsstring>()</argsstring>
        <name>toString</name>
        <qualifiedname>RDE::Graph::toString</qualifiedname>
        <briefdescription>
<para>This function returns the graph tree as a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="186" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1a7d59f60c2a597a199d667e49bd475f04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node * RDE::Graph::getRoot</definition>
        <argsstring>()</argsstring>
        <name>getRoot</name>
        <qualifiedname>RDE::Graph::getRoot</qualifiedname>
        <briefdescription>
<para>Returns the Id of the root. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>NodeID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="192" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1ae774eaaacb7e1a71f18432cf12b9f318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::Graph::setNodeActive</definition>
        <argsstring>(Node *_node, bool _active)</argsstring>
        <name>setNodeActive</name>
        <qualifiedname>RDE::Graph::setNodeActive</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>_active</declname>
        </param>
        <briefdescription>
<para>Enables or disables a node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_node</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> to be enabled or disabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_active</parametername>
</parameternamelist>
<parameterdescription>
<para>If is enabled or disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="199" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1ae5659a0ac5a26f2b6ff0b60b05510628" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RDE::Graph::isNodeActive</definition>
        <argsstring>(Node *_node)</argsstring>
        <name>isNodeActive</name>
        <qualifiedname>RDE::Graph::isNodeActive</qualifiedname>
        <param>
          <type><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>_node</declname>
        </param>
        <briefdescription>
<para>Returns if the node is active or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_node</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_r_d_e_1_1_node" kindref="compound">Node</ref> to check if is active. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="206" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1a09c70fd381ba7eddd7b6b8c2da0cb1f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Archetype</declname>
            <defname>Archetype</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto RDE::Graph::query</definition>
        <argsstring>()</argsstring>
        <name>query</name>
        <qualifiedname>RDE::Graph::query</qualifiedname>
        <briefdescription>
<para>This is used to create the custom ECS work flow, more information on <ref refid="class_r_d_e_1_1_e_c_s_manager" kindref="compound">ECSManager</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Archetype</parametername>
</parameternamelist>
<parameterdescription>
<para>The Components that the query must look for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A entt query </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="214" column="18" bodyfile="engine/include/core/graph/Graph.h" bodystart="224" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_graph_1ad84b5d632c35c6178951a03d64886845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeContainer &amp;</type>
        <definition>NodeContainer &amp; RDE::Graph::getNodeContainer</definition>
        <argsstring>()</argsstring>
        <name>getNodeContainer</name>
        <qualifiedname>RDE::Graph::getNodeContainer</qualifiedname>
        <briefdescription>
<para>Returns the registry of EnTT that contains the Nodes. This is almost 100% sure NOT needed by end users. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>NodeContainer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/graph/Graph.h" line="220" column="27"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>RDE::Graph</label>
        <link refid="class_r_d_e_1_1_graph"/>
        <childnode refid="2" relation="usage">
          <edgelabel>onEventDel</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>RDE::UniqueDelegate&lt; void(NodeContainer &amp;, RDE::Event &amp;)&gt;</label>
        <link refid="struct_r_d_e_1_1_unique_delegate"/>
      </node>
    </collaborationgraph>
    <location file="engine/include/core/graph/Graph.h" line="63" column="5" bodyfile="engine/include/core/graph/Graph.h" bodystart="63" bodyend="221"/>
    <listofallmembers>
      <member refid="class_r_d_e_1_1_graph_1a9816083e25bae0b2f472e19382136687" prot="private" virt="non-virtual"><scope>RDE::Graph</scope><name>Canvas</name></member>
      <member refid="class_r_d_e_1_1_graph_1aed8714396345e5fc5b1a2bf7ccaed500" prot="private" virt="non-virtual"><scope>RDE::Graph</scope><name>ConfigManager</name></member>
      <member refid="class_r_d_e_1_1_graph_1a295b232ac336712a22e9957de67eb074" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>createNode</name></member>
      <member refid="class_r_d_e_1_1_graph_1aa367f552cb81053588e04179773c8592" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>getNode</name></member>
      <member refid="class_r_d_e_1_1_graph_1ac58aab90bbcb9058d488a2cdcab0c616" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>getNode</name></member>
      <member refid="class_r_d_e_1_1_graph_1ad84b5d632c35c6178951a03d64886845" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>getNodeContainer</name></member>
      <member refid="class_r_d_e_1_1_graph_1a7d59f60c2a597a199d667e49bd475f04" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>getRoot</name></member>
      <member refid="class_r_d_e_1_1_graph_1a876662b4b92fcde196253a923f9359b4" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>Graph</name></member>
      <member refid="class_r_d_e_1_1_graph_1af4f241a517f779b649085b1b171a83b1" prot="private" virt="non-virtual"><scope>RDE::Graph</scope><name>ImGuiScene</name></member>
      <member refid="class_r_d_e_1_1_graph_1a91732f6740e242affffdf86bfd093733" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>instantiatePrefab</name></member>
      <member refid="class_r_d_e_1_1_graph_1ae5659a0ac5a26f2b6ff0b60b05510628" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>isNodeActive</name></member>
      <member refid="class_r_d_e_1_1_graph_1affa925bb95f3fd4fb12ff932808470f4" prot="private" virt="non-virtual"><scope>RDE::Graph</scope><name>name</name></member>
      <member refid="class_r_d_e_1_1_graph_1a6db9d28bd448a131448276ee03de1e6d" prot="private" virt="non-virtual"><scope>RDE::Graph</scope><name>Node</name></member>
      <member refid="class_r_d_e_1_1_graph_1af3f842217ba2bb2c5cc6c9e39772962f" prot="private" virt="non-virtual"><scope>RDE::Graph</scope><name>onDataChanged</name></member>
      <member refid="class_r_d_e_1_1_graph_1a7e2bee71b188f22349b33814e7894b37" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>onEventDel</name></member>
      <member refid="class_r_d_e_1_1_graph_1a593a3ffb242b39d742e850b74985309a" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>orphan</name></member>
      <member refid="class_r_d_e_1_1_graph_1abf92b9bd9ee1139ef1fcc9b1415a9db1" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>orphan</name></member>
      <member refid="class_r_d_e_1_1_graph_1a5c7089e35014cf9a7744c4d944b148df" prot="private" virt="non-virtual"><scope>RDE::Graph</scope><name>printScene</name></member>
      <member refid="class_r_d_e_1_1_graph_1a09c70fd381ba7eddd7b6b8c2da0cb1f5" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>query</name></member>
      <member refid="class_r_d_e_1_1_graph_1a58eab1c87a70c7b1e8a9c05d16a37672" prot="private" virt="non-virtual"><scope>RDE::Graph</scope><name>registry</name></member>
      <member refid="class_r_d_e_1_1_graph_1a47cc4f110838ba04f1c89e79bad204ea" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>removeNode</name></member>
      <member refid="class_r_d_e_1_1_graph_1a2b699efbe8cf0359f60601c38b3dca7d" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>removeNode</name></member>
      <member refid="class_r_d_e_1_1_graph_1a702459c990a49f7ed0d74d4cfbc3fdf5" prot="private" virt="non-virtual"><scope>RDE::Graph</scope><name>removeNodeInner</name></member>
      <member refid="class_r_d_e_1_1_graph_1ac8855f7d22395763f7985d6a6db903c6" prot="private" virt="non-virtual"><scope>RDE::Graph</scope><name>renderingTreeData</name></member>
      <member refid="class_r_d_e_1_1_graph_1a64d889a8831a97b28ee0ba11f65ee06d" prot="private" virt="non-virtual"><scope>RDE::Graph</scope><name>RenderizableInnerData</name></member>
      <member refid="class_r_d_e_1_1_graph_1a032858ae1fe02d2d1170981c2af2d67c" prot="private" virt="non-virtual"><scope>RDE::Graph</scope><name>Scene</name></member>
      <member refid="class_r_d_e_1_1_graph_1ab417c5e29ffa9be012c74d23ff4a76fd" prot="private" virt="non-virtual"><scope>RDE::Graph</scope><name>scene</name></member>
      <member refid="class_r_d_e_1_1_graph_1a5aa78d6fceaf03380cf2b71d0a8e370c" prot="private" virt="non-virtual"><scope>RDE::Graph</scope><name>sceneRoot</name></member>
      <member refid="class_r_d_e_1_1_graph_1ae774eaaacb7e1a71f18432cf12b9f318" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>setNodeActive</name></member>
      <member refid="class_r_d_e_1_1_graph_1aed0df137164763b602fdafbf01615de9" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>setParent</name></member>
      <member refid="class_r_d_e_1_1_graph_1aa7a328baedb2d8369cde0c870d322339" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>toString</name></member>
      <member refid="class_r_d_e_1_1_graph_1af851b4d9aacd1a871da33592334b8d72" prot="private" virt="non-virtual"><scope>RDE::Graph</scope><name>Transform</name></member>
      <member refid="class_r_d_e_1_1_graph_1a3dfc9521caba3d2bee092686f7d487ee" prot="private" virt="non-virtual"><scope>RDE::Graph</scope><name>UITransform</name></member>
      <member refid="class_r_d_e_1_1_graph_1a925a5d52f50e667f4a000cc145e45ccd" prot="public" virt="non-virtual"><scope>RDE::Graph</scope><name>~Graph</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
