<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="class_r_d_e_1_1_shader_manager" kind="class" language="C++" prot="public">
    <compoundname>RDE::ShaderManager</compoundname>
    <includes refid="_shader_manager_8h" local="no">ShaderManager.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_r_d_e_1_1_shader_manager_1aaf55420201900b797017623c8f054f17" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, <ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> * &gt;</type>
        <definition>std::unordered_map&lt;std::string, Shader*&gt; RDE::ShaderManager::shadersByName</definition>
        <argsstring></argsstring>
        <name>shadersByName</name>
        <qualifiedname>RDE::ShaderManager::shadersByName</qualifiedname>
        <briefdescription>
<para>Map with all of the loaded Shaders on the GPU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="29" column="32" bodyfile="engine/include/core/render/elements/ShaderManager.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_shader_manager_1ad26276ff11f99245dfba14c73892099c" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; ShaderID, <ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> * &gt;</type>
        <definition>std::unordered_map&lt;ShaderID, Shader*&gt; RDE::ShaderManager::shadersById</definition>
        <argsstring></argsstring>
        <name>shadersById</name>
        <qualifiedname>RDE::ShaderManager::shadersById</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="30" column="32" bodyfile="engine/include/core/render/elements/ShaderManager.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_d_e_1_1_shader_manager_1af518f6f77ae831abac7aead0000f794c" prot="private" static="no" mutable="no">
        <type><ref refid="class_r_d_e_1_1_file_manager" kindref="compound">FileManager</ref> *</type>
        <definition>FileManager* RDE::ShaderManager::fileManager</definition>
        <argsstring></argsstring>
        <name>fileManager</name>
        <qualifiedname>RDE::ShaderManager::fileManager</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="31" column="25" bodyfile="engine/include/core/render/elements/ShaderManager.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1a80bce0d2075b1019a77a3ca4980a5d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::ShaderManager::init</definition>
        <argsstring>(FileManager *_fileManager)</argsstring>
        <name>init</name>
        <qualifiedname>RDE::ShaderManager::init</qualifiedname>
        <param>
          <type><ref refid="class_r_d_e_1_1_file_manager" kindref="compound">FileManager</ref> *</type>
          <declname>_fileManager</declname>
        </param>
        <briefdescription>
<para>Initializes all the crucial elements of the <ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> <ref refid="class_r_d_e_1_1_manager" kindref="compound">Manager</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This is not meant to be called by end-users. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="38" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1a407592ba729590d7f9d9ef644327f91f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::ShaderManager::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <qualifiedname>RDE::ShaderManager::destroy</qualifiedname>
        <briefdescription>
<para>Destroys all of the Shaders from the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This is not meant to be called by end-users. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="44" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1ae57080c3833e547f9f80ed0b7bcd3722" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ShaderID</type>
        <definition>ShaderID RDE::ShaderManager::loadShader</definition>
        <argsstring>(const std::string &amp;_shaderName, const std::string &amp;_vertex, const std::string &amp;_fragment)</argsstring>
        <name>loadShader</name>
        <qualifiedname>RDE::ShaderManager::loadShader</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>_shaderName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_vertex</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_fragment</declname>
        </param>
        <briefdescription>
<para>Loads a shader in the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_shaderName</parametername>
</parameternamelist>
<parameterdescription>
<para>the name you will use later to reference the shader. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the vertex shader code. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_fragment</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the fragment shader code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="52" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1a58193f4d19209c03ae29651defa66045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::ShaderManager::unloadShader</definition>
        <argsstring>(const std::string &amp;_name)</argsstring>
        <name>unloadShader</name>
        <qualifiedname>RDE::ShaderManager::unloadShader</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>_name</declname>
        </param>
        <briefdescription>
<para>Unloads a shader from the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="58" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1a3e413a4dfcfd88cf2c56bbf4e94a4567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> *</type>
        <definition>Shader * RDE::ShaderManager::getShader</definition>
        <argsstring>(const std::string &amp;_name)</argsstring>
        <name>getShader</name>
        <qualifiedname>RDE::ShaderManager::getShader</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>_name</declname>
        </param>
        <briefdescription>
<para>Returns the shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="65" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1a70e0224bdcf948a4738ee16e146c52d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> *</type>
        <definition>Shader * RDE::ShaderManager::getShader</definition>
        <argsstring>(const ShaderID &amp;_shaderID)</argsstring>
        <name>getShader</name>
        <qualifiedname>RDE::ShaderManager::getShader</qualifiedname>
        <param>
          <type>const ShaderID &amp;</type>
          <declname>_shaderID</declname>
        </param>
        <briefdescription>
<para>Returns the shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_shadeID</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="72" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1af5bfea954dd22ccd7a47f5bd57198645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::ShaderManager::loadShaderVertexConfig</definition>
        <argsstring>(const std::string &amp;_shaderName, const std::vector&lt; VertexConfig &gt; &amp;_vertexConfig, const std::vector&lt; const char * &gt; _uniforms, int _maxIndicesPerDrawCall)</argsstring>
        <name>loadShaderVertexConfig</name>
        <qualifiedname>RDE::ShaderManager::loadShaderVertexConfig</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>_shaderName</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="struct_r_d_e_1_1_vertex_config" kindref="compound">VertexConfig</ref> &gt; &amp;</type>
          <declname>_vertexConfig</declname>
        </param>
        <param>
          <type>const std::vector&lt; const char * &gt;</type>
          <declname>_uniforms</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_maxIndicesPerDrawCall</declname>
        </param>
        <briefdescription>
<para>Sets the VertexData of a shader. Call this method only AFTER loadShader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_shaderName</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the shader. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_vertexConfig</parametername>
</parameternamelist>
<parameterdescription>
<para>List of data for each vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_maxIndicesPerDrawCall</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of indices per drawBatched call. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="80" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1a5ccf1c30d34a590ed13bb0c87a2a71c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::ShaderManager::setInt</definition>
        <argsstring>(ShaderID _shaderID, const std::string &amp;_uniformName, int _value) const</argsstring>
        <name>setInt</name>
        <qualifiedname>RDE::ShaderManager::setInt</qualifiedname>
        <param>
          <type>ShaderID</type>
          <declname>_shaderID</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_uniformName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_value</declname>
        </param>
        <briefdescription>
<para>Sets an &apos;int&apos; uniform for a specific shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_shaderID</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> that this value is uploaded to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_uniformName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the uniform to upload the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to upload </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="88" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1a46d388cf07ac0629e5514c1b6ef52c40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::ShaderManager::setInt2</definition>
        <argsstring>(ShaderID _shaderID, const std::string &amp;_uniformName, const glm::ivec2 &amp;_value) const</argsstring>
        <name>setInt2</name>
        <qualifiedname>RDE::ShaderManager::setInt2</qualifiedname>
        <param>
          <type>ShaderID</type>
          <declname>_shaderID</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_uniformName</declname>
        </param>
        <param>
          <type>const glm::ivec2 &amp;</type>
          <declname>_value</declname>
        </param>
        <briefdescription>
<para>Sets an &apos;int2&apos; uniform for a specific shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_shaderID</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> that this value is uploaded to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_uniformName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the uniform to upload the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to upload </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="96" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1abd948ffbc21426b80335085cd6d1e037" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::ShaderManager::setInt3</definition>
        <argsstring>(ShaderID _shaderID, const std::string &amp;_uniformName, const glm::ivec3 &amp;_value) const</argsstring>
        <name>setInt3</name>
        <qualifiedname>RDE::ShaderManager::setInt3</qualifiedname>
        <param>
          <type>ShaderID</type>
          <declname>_shaderID</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_uniformName</declname>
        </param>
        <param>
          <type>const glm::ivec3 &amp;</type>
          <declname>_value</declname>
        </param>
        <briefdescription>
<para>Sets an &apos;int3&apos; uniform for a specific shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_shaderID</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> that this value is uploaded to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_uniformName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the uniform to upload the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to upload </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="104" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1ac47e2e0f74f9804d3a284f2d5787288a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::ShaderManager::setInt4</definition>
        <argsstring>(ShaderID _shaderID, const std::string &amp;_uniformName, const glm::ivec4 &amp;_value) const</argsstring>
        <name>setInt4</name>
        <qualifiedname>RDE::ShaderManager::setInt4</qualifiedname>
        <param>
          <type>ShaderID</type>
          <declname>_shaderID</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_uniformName</declname>
        </param>
        <param>
          <type>const glm::ivec4 &amp;</type>
          <declname>_value</declname>
        </param>
        <briefdescription>
<para>Sets an &apos;int4&apos; uniform for a specific shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_shaderID</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> that this value is uploaded to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_uniformName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the uniform to upload the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to upload </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="112" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1a081d242f97b1f6282c4a2be0b894bba9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::ShaderManager::setFloat</definition>
        <argsstring>(ShaderID _shaderID, const std::string &amp;_uniformName, float _value) const</argsstring>
        <name>setFloat</name>
        <qualifiedname>RDE::ShaderManager::setFloat</qualifiedname>
        <param>
          <type>ShaderID</type>
          <declname>_shaderID</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_uniformName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>_value</declname>
        </param>
        <briefdescription>
<para>Sets a &apos;float&apos; uniform for a specific shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_shaderID</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> that this value is uploaded to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_uniformName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the uniform to upload the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to upload </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="120" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1a68665cb75b2b50fa569dd8a9b42722f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::ShaderManager::setFloat2</definition>
        <argsstring>(ShaderID _shaderID, const std::string &amp;_uniformName, const glm::vec2 &amp;_value) const</argsstring>
        <name>setFloat2</name>
        <qualifiedname>RDE::ShaderManager::setFloat2</qualifiedname>
        <param>
          <type>ShaderID</type>
          <declname>_shaderID</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_uniformName</declname>
        </param>
        <param>
          <type>const glm::vec2 &amp;</type>
          <declname>_value</declname>
        </param>
        <briefdescription>
<para>Sets a &apos;float2&apos; uniform for a specific shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_shaderID</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> that this value is uploaded to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_uniformName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the uniform to upload the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to upload </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="128" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1a91aa6d6498c0a030fa3d87b73be41ed2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::ShaderManager::setFloat3</definition>
        <argsstring>(ShaderID _shaderID, const std::string &amp;_uniformName, const glm::vec3 &amp;_value) const</argsstring>
        <name>setFloat3</name>
        <qualifiedname>RDE::ShaderManager::setFloat3</qualifiedname>
        <param>
          <type>ShaderID</type>
          <declname>_shaderID</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_uniformName</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>_value</declname>
        </param>
        <briefdescription>
<para>Sets a &apos;float3&apos; uniform for a specific shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_shaderID</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> that this value is uploaded to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_uniformName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the uniform to upload the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to upload </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="136" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1a1fb08b6d682979dc4de6472e2cc7df0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::ShaderManager::setFloat4</definition>
        <argsstring>(ShaderID _shaderID, const std::string &amp;_uniformName, const glm::vec4 &amp;_value) const</argsstring>
        <name>setFloat4</name>
        <qualifiedname>RDE::ShaderManager::setFloat4</qualifiedname>
        <param>
          <type>ShaderID</type>
          <declname>_shaderID</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_uniformName</declname>
        </param>
        <param>
          <type>const glm::vec4 &amp;</type>
          <declname>_value</declname>
        </param>
        <briefdescription>
<para>Sets a &apos;float4&apos; uniform for a specific shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_shaderID</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> that this value is uploaded to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_uniformName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the uniform to upload the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to upload </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="144" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1a4086ad70f95744fe89cf540b47f51d92" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::ShaderManager::setMat2</definition>
        <argsstring>(ShaderID _shaderID, const std::string &amp;_uniformName, const glm::mat2 &amp;_value) const</argsstring>
        <name>setMat2</name>
        <qualifiedname>RDE::ShaderManager::setMat2</qualifiedname>
        <param>
          <type>ShaderID</type>
          <declname>_shaderID</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_uniformName</declname>
        </param>
        <param>
          <type>const glm::mat2 &amp;</type>
          <declname>_value</declname>
        </param>
        <briefdescription>
<para>Sets a &apos;mat2&apos; uniform for a specific shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_shaderID</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> that this value is uploaded to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_uniformName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the uniform to upload the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to upload </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="152" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1aa26415bcdc6a734904476b3ddacc7a60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::ShaderManager::setMat3</definition>
        <argsstring>(ShaderID _shaderID, const std::string &amp;_uniformName, const glm::mat3 &amp;_value) const</argsstring>
        <name>setMat3</name>
        <qualifiedname>RDE::ShaderManager::setMat3</qualifiedname>
        <param>
          <type>ShaderID</type>
          <declname>_shaderID</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_uniformName</declname>
        </param>
        <param>
          <type>const glm::mat3 &amp;</type>
          <declname>_value</declname>
        </param>
        <briefdescription>
<para>Sets a &apos;mat3&apos; uniform for a specific shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_shaderID</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> that this value is uploaded to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_uniformName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the uniform to upload the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to upload </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="160" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_r_d_e_1_1_shader_manager_1a8ba5a9c6281bdccf47cc93791dc8e0e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RDE::ShaderManager::setMat4</definition>
        <argsstring>(ShaderID _shaderID, const std::string &amp;_uniformName, const glm::mat4 &amp;_value) const</argsstring>
        <name>setMat4</name>
        <qualifiedname>RDE::ShaderManager::setMat4</qualifiedname>
        <param>
          <type>ShaderID</type>
          <declname>_shaderID</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_uniformName</declname>
        </param>
        <param>
          <type>const glm::mat4 &amp;</type>
          <declname>_value</declname>
        </param>
        <briefdescription>
<para>Sets a &apos;mat4&apos; uniform for a specific shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_shaderID</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_r_d_e_1_1_shader" kindref="compound">Shader</ref> that this value is uploaded to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_uniformName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the uniform to upload the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to upload </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/core/render/elements/ShaderManager.h" line="168" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>TThis class is in charge of compiling and storing the references of all of the shaders. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="attention"><para>All managers destroy all the resources before closing the application, it is not needed to be done by the end user. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="engine/include/core/render/elements/ShaderManager.h" line="24" column="5" bodyfile="engine/include/core/render/elements/ShaderManager.h" bodystart="24" bodyend="169"/>
    <listofallmembers>
      <member refid="class_r_d_e_1_1_shader_manager_1a407592ba729590d7f9d9ef644327f91f" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>destroy</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1af518f6f77ae831abac7aead0000f794c" prot="private" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>fileManager</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1a3e413a4dfcfd88cf2c56bbf4e94a4567" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>getShader</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1a70e0224bdcf948a4738ee16e146c52d2" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>getShader</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1a80bce0d2075b1019a77a3ca4980a5d5a" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>init</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1ae57080c3833e547f9f80ed0b7bcd3722" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>loadShader</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1af5bfea954dd22ccd7a47f5bd57198645" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>loadShaderVertexConfig</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1a081d242f97b1f6282c4a2be0b894bba9" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>setFloat</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1a68665cb75b2b50fa569dd8a9b42722f7" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>setFloat2</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1a91aa6d6498c0a030fa3d87b73be41ed2" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>setFloat3</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1a1fb08b6d682979dc4de6472e2cc7df0d" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>setFloat4</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1a5ccf1c30d34a590ed13bb0c87a2a71c0" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>setInt</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1a46d388cf07ac0629e5514c1b6ef52c40" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>setInt2</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1abd948ffbc21426b80335085cd6d1e037" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>setInt3</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1ac47e2e0f74f9804d3a284f2d5787288a" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>setInt4</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1a4086ad70f95744fe89cf540b47f51d92" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>setMat2</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1aa26415bcdc6a734904476b3ddacc7a60" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>setMat3</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1a8ba5a9c6281bdccf47cc93791dc8e0e9" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>setMat4</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1ad26276ff11f99245dfba14c73892099c" prot="private" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>shadersById</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1aaf55420201900b797017623c8f054f17" prot="private" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>shadersByName</name></member>
      <member refid="class_r_d_e_1_1_shader_manager_1a58193f4d19209c03ae29651defa66045" prot="public" virt="non-virtual"><scope>RDE::ShaderManager</scope><name>unloadShader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
